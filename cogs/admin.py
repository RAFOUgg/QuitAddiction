import discord
from discord.ext import commands
from discord import app_commands, ui
from db.database import SessionLocal
from db.models import ServerState, PlayerProfile
import hashlib
import datetime
import math

# --- Constantes pour la gestion des menus ---
MAX_OPTIONS_PER_SELECT = 25
MAX_LABEL_LENGTH = 100 # Limite pour le placeholder d'un Select
MAX_SELECT_OPTION_LABEL_LENGTH = 25 # Limite Discord pour le label d'une option
MAX_SELECT_OPTION_VALUE_LENGTH = 25 # Limite Discord pour la value d'une option

class AdminCog(commands.Cog):
    """Gestion des configurations du bot et du jeu pour le serveur."""
    def __init__(self, bot):
        self.bot = bot
        self.MAX_OPTION_LENGTH = MAX_SELECT_OPTION_LABEL_LENGTH # On utilise cette constante ici aussi

    # --- Pr√©r√©glages des Modes de Jeu ---
    GAME_MODES = {
        "peaceful": {
            "tick_interval_minutes": 60,
            "rates": {
                "hunger": 5.0, "thirst": 4.0, "bladder": 5.0,
                "energy": 3.0, "stress": 1.0, "boredom": 2.0,
                "addiction_base": 0.05, "toxins_base": 0.1,
            }
        },
        "medium": {
            "tick_interval_minutes": 30,
            "rates": {
                "hunger": 10.0, "thirst": 8.0, "bladder": 15.0,
                "energy": 5.0, "stress": 3.0, "boredom": 7.0,
                "addiction_base": 0.1, "toxins_base": 0.5,
            }
        },
        "hard": {
            "tick_interval_minutes": 15,
            "rates": {
                "hunger": 20.0, "thirst": 16.0, "bladder": 30.0,
                "energy": 10.0, "stress": 6.0, "boredom": 14.0,
                "addiction_base": 0.2, "toxins_base": 1.0,
            }
        }
    }
    
    # --- Pr√©r√©glages des Dur√©es de Partie ---
    GAME_DURATIONS = {
        "short": {"days": 14, "label": "Court (14 jours)"},
        "medium": {"days": 31, "label": "Moyen (31 jours)"},
        "long": {"days": 72, "label": "Long (72 jours)"},
    }

    # --- M√©thodes pour les configurations sp√©cifiques (R√¥le Admin, Salon, R√¥le Notif) ---
    
    def generate_role_and_channel_config_embed(self, state: ServerState) -> discord.Embed:
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration G√©n√©rale (R√¥les & Salons)",
            description="Utilisez les menus d√©roulants ci-dessous pour s√©lectionner les r√¥les et salons appropri√©s.",
            color=discord.Color.purple()
        )
        current_admin_role = f"<@&{state.admin_role_id}>" if state.admin_role_id else "Non d√©fini"
        current_notif_role = f"<@&{state.notification_role_id}>" if hasattr(state, 'notification_role_id') and state.notification_role_id else "Non d√©fini"
        current_game_channel = f"<#{state.game_channel_id}>" if state.game_channel_id else "Non d√©fini"

        embed.add_field(name="üëë R√¥le Admin", value=current_admin_role, inline=False)
        embed.add_field(name="üîî R√¥le de Notification", value=current_notif_role, inline=False)
        embed.add_field(name="üéÆ Salon de Jeu", value=current_game_channel, inline=False)
        return embed

    # Vue pour la s√©lection des r√¥les et du salon
    def generate_general_config_view(self, guild_id: str, guild: discord.Guild) -> discord.ui.View:
        view = discord.ui.View(timeout=None)

        # Helper function to create options and a mapping
        def create_options_and_mapping(items, item_type):
            all_options = []
            id_mapping = {} 

            if guild:
                sorted_items = sorted(items, key=lambda x: getattr(x, 'position', x.id))

                for item in sorted_items:
                    item_id = str(item.id)
                    item_name = item.name

                    if item_id is None or not isinstance(item_name, str) or not item_name:
                        print(f"DEBUG: Ignor√© item (type: {item_type}) car ID nul ou nom invalide: ID={item_id}, Nom={item_name}")
                        continue

                    # Pr√©parer le label
                    label = item_name[:MAX_SELECT_OPTION_LABEL_LENGTH]
                    if not label:
                        label = item_id[:MAX_SELECT_OPTION_LABEL_LENGTH]
                        if not label:
                           print(f"DEBUG: Ignor√© item (type: {item_type}) car aucun label valide g√©n√©r√©: ID={item_id}, Nom='{item_name}'")
                           continue

                    # Pr√©parer la value
                    hashed_id = hashlib.sha256(item_id.encode()).hexdigest()
                    value = hashed_id[:MAX_SELECT_OPTION_VALUE_LENGTH]
                    if not value:
                        print(f"DEBUG: Ignor√© item (type: {item_type}) car aucune value valide g√©n√©r√©e: ID={item_id}, Nom='{item_name}'")
                        continue

                    # V√©rification finale des longueurs avant d'ajouter
                    if not (1 <= len(label) <= MAX_SELECT_OPTION_LABEL_LENGTH and 1 <= len(value) <= MAX_SELECT_OPTION_VALUE_LENGTH):
                        print(f"DEBUG: ERREUR DE LONGUEUR - Ignor√© item (type: {item_type})")
                        print(f"  -> Item original: ID='{item_id}', Nom='{item_name}'")
                        print(f"  -> Label g√©n√©r√© : '{label}' (longueur: {len(label)})")
                        print(f"  -> Value g√©n√©r√©e: '{value}' (longueur: {len(value)})")
                        continue

                    print(f"DEBUG: Ajout option (type: {item_type}) - Label='{label}', Value='{value}', Desc='ID: {item_id}'")
                    
                    all_options.append(discord.SelectOption(label=label, value=value, description=f"ID: {item_id}"))
                    id_mapping[value] = item_id
                
                if not all_options:
                    all_options.append(discord.SelectOption(label="Aucun trouv√©", value="no_items", description="Aucun item trouv√©.", default=True))
            else:
                all_options.append(discord.SelectOption(label="Erreur serveur", value="error_guild", description="Serveur non trouv√©.", default=True))
            
            return all_options, id_mapping

        # --- G√©n√©ration des menus ---
        role_options, role_id_mapping = create_options_and_mapping(guild.roles if guild else [], "role")
        channel_options, channel_id_mapping = create_options_and_mapping(guild.text_channels if guild else [], "channel")

        # Cr√©er des menus d√©roulants par lots de MAX_OPTIONS_PER_SELECT
        
        # Menus pour les r√¥les
        num_role_menus = math.ceil(len(role_options) / MAX_OPTIONS_PER_SELECT)
        for i in range(num_role_menus):
            start_index = i * MAX_OPTIONS_PER_SELECT
            end_index = start_index + MAX_OPTIONS_PER_SELECT
            current_role_options = role_options[start_index:end_index]
            
            # Cr√©er un mapping r√©duit pour ce menu sp√©cifique
            current_role_id_mapping = {opt.value: role_id_mapping[opt.value] for opt in current_role_options if opt.value in role_id_mapping}

            if current_role_options:
                placeholder = f"S√©lectionnez le r√¥le admin (partie {i+1}/{num_role_menus})..."[:MAX_LABEL_LENGTH]
                role_select_admin = self.RoleSelect(guild_id, "admin_role", row=i, options=current_role_options, id_mapping=current_role_id_mapping, menu_index=i, total_menus=num_role_menus)
                view.add_item(role_select_admin)

        # Menus pour les canaux
        num_channel_menus = math.ceil(len(channel_options) / MAX_OPTIONS_PER_SELECT)
        for i in range(num_channel_menus):
            start_index = i * MAX_OPTIONS_PER_SELECT
            end_index = start_index + MAX_OPTIONS_PER_SELECT
            current_channel_options = channel_options[start_index:end_index]

            # Cr√©er un mapping r√©duit pour ce menu sp√©cifique
            current_channel_id_mapping = {opt.value: channel_id_mapping[opt.value] for opt in current_channel_options if opt.value in channel_id_mapping}

            if current_channel_options:
                placeholder = f"S√©lectionnez le salon jeu (partie {i+1}/{num_channel_menus})..."[:MAX_LABEL_LENGTH]
                channel_select_game = self.ChannelSelect(guild_id, "game_channel", row=num_role_menus + i, options=current_channel_options, id_mapping=current_channel_id_mapping, menu_index=i, total_menus=num_channel_menus)
                view.add_item(channel_select_game)
        
        # Ajoutez un bouton de retour qui reste toujours visible
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=num_role_menus + num_channel_menus))
        return view

    # Modifiez les classes RoleSelect et ChannelSelect pour accepter menu_index et total_menus
    class RoleSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, options: list[discord.SelectOption], id_mapping: dict, menu_index: int, total_menus: int):
            placeholder = f"S√©lectionnez le r√¥le pour {'l\'admin' if select_type == 'admin_role' else 'les notifications'} (partie {menu_index+1}/{total_menus})..."
            placeholder = placeholder[:MAX_LABEL_LENGTH]
            super().__init__(placeholder=placeholder, options=options, custom_id=f"select_role_{select_type}_{guild_id}_{menu_index}", row=row)
            self.guild_id = guild_id
            self.select_type = select_type
            self.id_mapping = id_mapping
            self.menu_index = menu_index
            self.total_menus = total_menus

        async def callback(self, interaction: discord.Interaction):
            if not interaction.guild:
                await interaction.response.send_message("Erreur: Impossible de trouver le serveur courant pour cette action.", ephemeral=True)
                return

            if not self.values or self.values[0] in ["no_items", "error_guild"]:
                await interaction.response.send_message("Veuillez s√©lectionner un r√¥le valide.", ephemeral=True)
                return

            selected_short_id = self.values[0]
            selected_role_id = self.id_mapping.get(selected_short_id)

            if not selected_role_id:
                await interaction.response.send_message("Erreur: Impossible de r√©cup√©rer l'ID du r√¥le.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                # Enregistrer la s√©lection pour cet index de menu
                if self.select_type == "admin_role":
                    # Si c'est le premier menu, on met √† jour l'ID direct. Sinon, on ne fait rien pour l'instant
                    # La logique pour combiner les s√©lections multiples pour un m√™me type est plus complexe
                    # Pour l'instant, on suppose que le premier menu est le principal pour l'admin/notif
                    if self.menu_index == 0:
                        state.admin_role_id = selected_role_id
                    else:
                        # Vous pourriez stocker les IDs dans une liste si un type peut avoir plusieurs menus
                        # ou simplement ignorer les s√©lections des menus suivants pour ce type
                        pass 
                elif self.select_type == "notification_role":
                    if self.menu_index == 0:
                        state.notification_role_id = selected_role_id
                    else:
                        pass # Ignorer les menus suivants pour notification_role pour l'instant

                try:
                    db.commit()
                    db.refresh(state) 

                    cog = interaction.client.get_cog("AdminCog")
                    # IMPORTANT: Pour g√©rer la logique multi-menus correctement lors d'une r√©ponse,
                    # il faudrait rafra√Æchir la vue avec les bons menus.
                    # Pour l'instant, on se contente de r√©√©diter le message avec l'embed et une vue qui pourrait √™tre r√©initialis√©e.
                    # Une gestion plus robuste impliquerait de sauvegarder les s√©lections interm√©diaires.
                    await interaction.response.edit_message(
                        embed=cog.generate_role_and_channel_config_embed(state),
                        view=cog.generate_general_config_view(self.guild_id, interaction.guild) # Re-g√©n√®re TOUS les menus
                    )
                    await interaction.followup.send(f"R√¥le pour {'l\'administration' if self.select_type == 'admin_role' else 'les notifications'} mis √† jour.", ephemeral=True)
                except Exception as e:
                    db.rollback()
                    await interaction.response.send_message(f"Erreur lors de la sauvegarde : {e}", ephemeral=True)
            else:
                await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur pour sauvegarder la configuration.", ephemeral=True)
            
            db.close()

    class ChannelSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, options: list[discord.SelectOption], id_mapping: dict, menu_index: int, total_menus: int):
            placeholder = f"S√©lectionnez le salon pour le jeu (partie {menu_index+1}/{total_menus})..."[:MAX_LABEL_LENGTH]
            super().__init__(placeholder=placeholder, options=options, custom_id=f"select_channel_{select_type}_{guild_id}_{menu_index}", row=row)
            self.guild_id = guild_id
            self.select_type = select_type
            self.id_mapping = id_mapping
            self.menu_index = menu_index
            self.total_menus = total_menus

        async def callback(self, interaction: discord.Interaction):
            if not interaction.guild:
                await interaction.response.send_message("Erreur: Impossible de trouver le serveur courant pour cette action.", ephemeral=True)
                return

            if not self.values or self.values[0] in ["no_items", "error_guild"]:
                await interaction.response.send_message("Veuillez s√©lectionner un salon valide.", ephemeral=True)
                return

            selected_short_id = self.values[0]
            selected_channel_id = self.id_mapping.get(selected_short_id)

            if not selected_channel_id:
                await interaction.response.send_message("Erreur: Impossible de r√©cup√©rer l'ID du salon.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                # Enregistrer la s√©lection pour cet index de menu
                if self.select_type == "game_channel":
                    if self.menu_index == 0:
                        state.game_channel_id = selected_channel_id
                    else:
                        pass # Ignorer les menus suivants pour game_channel pour l'instant

                try:
                    db.commit()
                    db.refresh(state)

                    cog = interaction.client.get_cog("AdminCog")
                    await interaction.response.edit_message(
                        embed=cog.generate_role_and_channel_config_embed(state),
                        view=cog.generate_general_config_view(self.guild_id, interaction.guild) # Re-g√©n√®re TOUS les menus
                    )
                    await interaction.followup.send(f"Salon de jeu mis √† jour.", ephemeral=True)
                except Exception as e:
                    db.rollback()
                    await interaction.response.send_message(f"Erreur lors de la sauvegarde : {e}", ephemeral=True)
            else:
                await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur pour sauvegarder la configuration.", ephemeral=True)
            
            db.close()

    # --- M√©thodes pour les autres configurations (Statistiques, Notifications, Avanc√©es) ---
    def generate_stats_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üìä Statistiques du Serveur", description="Fonctionnalit√© en d√©veloppement.", color=discord.Color.purple())
        return embed
    
    def generate_stats_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3))
        return view

    def generate_notifications_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üîî Param√®tres de Notifications", description="Configurez les r√¥les pour les notifications du jeu. (Fonctionnalit√© en d√©veloppement)", color=discord.Color.green())
        return embed
    
    def generate_notifications_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3))
        return view

    def generate_advanced_options_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üõ†Ô∏è Options Avanc√©es", description="Fonctionnalit√© en d√©veloppement.", color=discord.Color.grey())
        return embed
    
    def generate_advanced_options_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3))
        return view

    # M√©thode principale pour g√©n√©rer la vue du menu de configuration
    def generate_config_menu_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        
        # Ligne 0 : Mode & Dur√©e, Lancer/Reinitialiser, Sauvegarder
        view.add_item(self.SetupGameModeButton("üïπÔ∏è Mode & Dur√©e", guild_id, discord.ButtonStyle.primary, row=0))
        view.add_item(self.ConfigButton("üéÆ Lancer/Reinitialiser Partie", guild_id, discord.ButtonStyle.success, row=0))
        view.add_item(self.ConfigButton("üíæ Sauvegarder l'√âtat", guild_id, discord.ButtonStyle.blurple, row=0))
        
        # Ligne 1 : R√¥les & Salons, Statistiques
        view.add_item(self.GeneralConfigButton("‚öôÔ∏è R√¥les & Salons", guild_id, discord.ButtonStyle.grey, row=1)) 
        view.add_item(self.ConfigButton("üìä Voir Statistiques", guild_id, discord.ButtonStyle.gray, row=1))
        
        # Ligne 2 : Notifications, Options Avanc√©es
        view.add_item(self.ConfigButton("üîî Notifications", guild_id, discord.ButtonStyle.green, row=2))
        view.add_item(self.ConfigButton("üõ† Options Avanc√©es", guild_id, discord.ButtonStyle.secondary, row=2))
        
        # Ligne 3 : Bouton retour final
        view.add_item(self.BackButton("‚¨Ö Retour", guild_id, discord.ButtonStyle.red, row=3))
        
        return view

    # --- Boutons pour les diff√©rentes sections de configuration ---

    # Bouton pour lancer la sous-vue de s√©lection du Mode et Dur√©e
    class SetupGameModeButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int):
            super().__init__(label=label, style=style, row=row) 
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            cog = interaction.client.get_cog("AdminCog")
            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                return
            await interaction.response.edit_message(
                embed=cog.generate_setup_game_mode_embed(),
                view=cog.generate_setup_game_mode_view(self.guild_id)
            )

    # Embed pour la s√©lection du Mode de Jeu et Dur√©e
    def generate_setup_game_mode_embed(self) -> discord.Embed:
        embed = discord.Embed(
            title="üéÆ Configuration du Mode et de la Dur√©e",
            description="S√©lectionnez un mode de difficult√© et une dur√©e pour la partie.",
            color=discord.Color.teal()
        )
        return embed

    # View pour la s√©lection du Mode de Jeu et Dur√©e
    def generate_setup_game_mode_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.GameModeSelect(guild_id, "mode", row=0)) 
        view.add_item(self.GameDurationSelect(guild_id, "duration", row=1)) 
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=2))
        return view

    # Classe de Menu: Mode de Difficult√© (Peaceful, Medium, Hard)
    class GameModeSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int):
            options = [
                discord.SelectOption(label="Peaceful", description="Taux de d√©gradation bas.", value="peaceful"),
                discord.SelectOption(label="Medium (Standard)", description="Taux de d√©gradation standard.", value="medium"),
                discord.SelectOption(label="Hard", description="Taux de d√©gradation √©lev√©s. Plus difficile.", value="hard")
            ]
            super().__init__(placeholder="Choisissez le mode de difficult√©...", options=options, custom_id=f"select_gamemode_{guild_id}", row=row)
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            selected_mode = self.values[0]
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                cog = interaction.client.get_cog("AdminCog")
                mode_data = cog.GAME_MODES.get(selected_mode)

                if mode_data:
                    state.game_mode = selected_mode
                    state.game_tick_interval_minutes = mode_data["tick_interval_minutes"]
                    for key, value in mode_data["rates"].items():
                        setattr(state, f"degradation_rate_{key}", value)
                
                    db.commit()
                    
                    embed = cog.generate_setup_game_mode_embed()
                    embed.description = f"‚úÖ Mode de difficult√© d√©fini sur **{selected_mode.capitalize()}**.\n" + embed.description
                    
                    await interaction.response.edit_message(embed=embed, view=cog.generate_setup_game_mode_view(self.guild_id))
            
            db.close()

    # Classe de Menu: Dur√©e de Partie (Short, Medium, Long)
    class GameDurationSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int):
            options = [
                discord.SelectOption(label=data["label"], value=key)
                for key, data in AdminCog.GAME_DURATIONS.items()
            ]
            super().__init__(placeholder="Choisissez la dur√©e de la partie...", options=options, custom_id=f"select_gameduration_{guild_id}", row=row)
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            selected_duration_key = self.values[0]
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                cog = interaction.client.get_cog("AdminCog")
                if not cog:
                    await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                    db.close()
                    return
                    
                duration_data = cog.GAME_DURATIONS.get(selected_duration_key)
                
                if duration_data:
                    state.duration_key = selected_duration_key 
                    db.commit()
                    
                    embed = cog.generate_setup_game_mode_embed()
                    embed.description = f"‚úÖ Dur√©e de la partie d√©finie sur **{duration_data['label']}**.\n" + embed.description
                    await interaction.response.edit_message(embed=embed, view=cog.generate_setup_game_mode_view(self.guild_id))

            db.close()
            
    # Bouton de retour vers le Menu Principal des Param√®tres
    class BackButton(ui.Button): 
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int = 0):
            super().__init__(label=label, style=style, row=row)
            self.guild_id = guild_id
            
        async def callback(self, interaction: discord.Interaction):
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=str(self.guild_id)).first()
            cog = interaction.client.get_cog("AdminCog")

            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                db.close()
                return
            
            await interaction.response.edit_message(
                embed=cog.generate_config_menu_embed(state),
                view=cog.generate_config_menu_view(self.guild_id)      
            )
            db.close()

    # Classe g√©n√©rique pour les boutons de configuration
    class ConfigButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int):
            super().__init__(label=label, style=style, row=row)
            self.guild_id = guild_id
            self.label = label

        async def callback(self, interaction: discord.Interaction):
            cog = interaction.client.get_cog("AdminCog")
            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=str(self.guild_id)).first()

            if self.label == "üéÆ Lancer/Reinitialiser Partie":
                if state:
                    state.game_started = not state.game_started
                    state.game_start_time = datetime.datetime.utcnow() if state.game_started else None
                    db.commit()
                    
                    await interaction.response.edit_message(
                        embed=cog.generate_config_menu_embed(state),
                        view=cog.generate_config_menu_view(self.guild_id)
                    )
                    await interaction.followup.send(f"La partie a √©t√© {'lanc√©e' if state.game_started else 'arr√™t√©e/r√©initialis√©e'}.", ephemeral=True)
                else:
                    await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur.", ephemeral=True)

            elif self.label == "üíæ Sauvegarder l'√âtat":
                await interaction.response.edit_message(
                    embed=cog.generate_config_menu_embed(state),
                    view=cog.generate_config_menu_view(self.guild_id)
                )
                await interaction.followup.send("L'√©tat actuel a √©t√© sauvegard√©.", ephemeral=True)

            elif self.label == "üìä Voir Statistiques":
                await interaction.response.edit_message(
                    embed=cog.generate_stats_embed(self.guild_id),
                    view=cog.generate_stats_view(self.guild_id)
                )
                await interaction.followup.send("Affichage des statistiques...", ephemeral=True)

            elif self.label == "üîî Notifications":
                await interaction.response.edit_message(
                    embed=cog.generate_notifications_embed(self.guild_id),
                    view=cog.generate_notifications_view(self.guild_id)
                )
                await interaction.followup.send("Configuration des notifications...", ephemeral=True)

            elif self.label == "üõ†Ô∏è Options Avanc√©es":
                await interaction.response.edit_message(
                    embed=cog.generate_advanced_options_embed(self.guild_id),
                    view=cog.generate_advanced_options_view(self.guild_id)
                )
                await interaction.followup.send("Acc√®s aux options avanc√©es...", ephemeral=True)

            db.close()

    # Bouton qui va ouvrir la configuration des r√¥les et salons
    class GeneralConfigButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int):
            super().__init__(label=label, style=style, row=row) 
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            cog = interaction.client.get_cog("AdminCog")
            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                return
            
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            await interaction.response.edit_message(
                embed=cog.generate_role_and_channel_config_embed(state),
                view=cog.generate_general_config_view(self.guild_id, interaction.guild) 
            )
            db.close()

    # --- Classes pour les menus d√©roulants (RoleSelect et ChannelSelect) ---
    class RoleSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, options: list[discord.SelectOption], id_mapping: dict, menu_index: int, total_menus: int):
            placeholder = f"S√©lectionnez le r√¥le pour {'l\'admin' if select_type == 'admin_role' else 'les notifications'} (partie {menu_index+1}/{total_menus})..."
            placeholder = placeholder[:MAX_LABEL_LENGTH]
            # IMPORTANT : custom_id doit √™tre unique pour chaque menu d√©roulant
            super().__init__(placeholder=placeholder, options=options, custom_id=f"select_role_{select_type}_{guild_id}_{menu_index}", row=row)
            self.guild_id = guild_id
            self.select_type = select_type
            self.id_mapping = id_mapping 
            self.menu_index = menu_index
            self.total_menus = total_menus

        async def callback(self, interaction: discord.Interaction):
            if not interaction.guild:
                await interaction.response.send_message("Erreur: Impossible de trouver le serveur courant pour cette action.", ephemeral=True)
                return

            if not self.values or self.values[0] in ["no_items", "error_guild"]:
                await interaction.response.send_message("Veuillez s√©lectionner un r√¥le valide.", ephemeral=True)
                return

            selected_short_id = self.values[0]
            selected_role_id = self.id_mapping.get(selected_short_id)

            if not selected_role_id:
                await interaction.response.send_message("Erreur: Impossible de r√©cup√©rer l'ID du r√¥le.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                # Logique pour enregistrer la s√©lection.
                # Pour simplifier, on va juste prendre la s√©lection du premier menu si plusieurs menus sont utilis√©s pour le m√™me type.
                # Une approche plus compl√®te impliquerait de stocker toutes les s√©lections de mani√®re persistante.
                if self.menu_index == 0: # On ne prend en compte que la s√©lection du premier menu pour l'instant
                    if self.select_type == "admin_role":
                        state.admin_role_id = selected_role_id
                    elif self.select_type == "notification_role":
                        state.notification_role_id = selected_role_id
                
                try:
                    db.commit()
                    db.refresh(state) 

                    cog = interaction.client.get_cog("AdminCog")
                    # Re-g√©n√©rer la vue pour mettre √† jour l'affichage et potentiellement passer √† l'√©tape suivante si on avait une navigation plus complexe
                    await interaction.response.edit_message(
                        embed=cog.generate_role_and_channel_config_embed(state),
                        view=cog.generate_general_config_view(self.guild_id, interaction.guild) 
                    )
                    await interaction.followup.send(f"R√¥le pour {'l\'administration' if self.select_type == 'admin_role' else 'les notifications'} mis √† jour.", ephemeral=True)
                except Exception as e:
                    db.rollback()
                    await interaction.response.send_message(f"Erreur lors de la sauvegarde : {e}", ephemeral=True)
            else:
                await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur pour sauvegarder la configuration.", ephemeral=True)
            
            db.close()

    class ChannelSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, options: list[discord.SelectOption], id_mapping: dict, menu_index: int, total_menus: int):
            placeholder = f"S√©lectionnez le salon pour le jeu (partie {menu_index+1}/{total_menus})..."[:MAX_LABEL_LENGTH]
            super().__init__(placeholder=placeholder, options=options, custom_id=f"select_channel_{select_type}_{guild_id}_{menu_index}", row=row)
            self.guild_id = guild_id
            self.select_type = select_type
            self.id_mapping = id_mapping
            self.menu_index = menu_index
            self.total_menus = total_menus

        async def callback(self, interaction: discord.Interaction):
            if not interaction.guild:
                await interaction.response.send_message("Erreur: Impossible de trouver le serveur courant pour cette action.", ephemeral=True)
                return

            if not self.values or self.values[0] in ["no_items", "error_guild"]:
                await interaction.response.send_message("Veuillez s√©lectionner un salon valide.", ephemeral=True)
                return

            selected_short_id = self.values[0]
            selected_channel_id = self.id_mapping.get(selected_short_id)

            if not selected_channel_id:
                await interaction.response.send_message("Erreur: Impossible de r√©cup√©rer l'ID du salon.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                # Logique pour enregistrer la s√©lection. Similairement aux r√¥les, on prend la s√©lection du premier menu.
                if self.menu_index == 0:
                    if self.select_type == "game_channel":
                        state.game_channel_id = selected_channel_id
                
                try:
                    db.commit()
                    db.refresh(state)

                    cog = interaction.client.get_cog("AdminCog")
                    await interaction.response.edit_message(
                        embed=cog.generate_role_and_channel_config_embed(state),
                        view=cog.generate_general_config_view(self.guild_id, interaction.guild) 
                    )
                    await interaction.followup.send(f"Salon de jeu mis √† jour.", ephemeral=True)
                except Exception as e:
                    db.rollback()
                    await interaction.response.send_message(f"Erreur lors de la sauvegarde : {e}", ephemeral=True)
            else:
                await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur pour sauvegarder la configuration.", ephemeral=True)
            
            db.close()


async def setup(bot):
    await bot.add_cog(AdminCog(bot))