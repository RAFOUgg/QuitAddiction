import discord
from discord.ext import commands
from discord import app_commands

# On importe les fonctions de notre API de base de donn√©es
from core.database import get_db_session, get_or_create_server_config, update_staff_role, update_main_channel, get_or_create_cook

# --- D√©corateur de V√©rification Personnalis√© ---

def is_bot_staff():
    """
    Un d√©corateur de v√©rification pour les commandes slash.
    V√©rifie si l'utilisateur qui ex√©cute la commande a le r√¥le staff
    configur√© pour ce serveur dans la base de donn√©es.
    """
    async def predicate(interaction: discord.Interaction) -> bool:
        # Ouvre une session avec la base de donn√©es
        session = get_db_session()
        try:
            config = get_or_create_server_config(session, interaction.guild.id)
            staff_role_id = config.staff_role_id
        finally:
            # On s'assure de toujours fermer la session
            session.close()

        if not staff_role_id:
            await interaction.response.send_message(
                "‚ùå Le r√¥le du staff n'a pas encore √©t√© configur√© sur ce serveur.\n"
                "Un administrateur doit d'abord utiliser la commande `/config role`.",
                ephemeral=True
            )
            return False

        # V√©rifie si l'utilisateur poss√®de le r√¥le
        staff_role = interaction.guild.get_role(staff_role_id)
        if staff_role is None or staff_role not in interaction.user.roles:
            await interaction.response.send_message(
                "‚õî Vous n'avez pas la permission d'utiliser cette commande. Elle est r√©serv√©e au staff.",
                ephemeral=True
            )
            return False
            
        return True
    return app_commands.check(predicate)


# --- Cog d'Administration ---

class Admin(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        
    @app_commands.command(name="config", description="[Admin] Configure les r√¥les du bot.")
    @app_commands.checks.has_permissions(administrator=True) # Seuls les admins du SERVEUR peuvent faire √ßa
    async def config_role(self, interaction: discord.Interaction, role: discord.Role):
        """D√©finit le r√¥le qui aura les permissions staff pour le bot."""
        session = get_db_session()
        try:
            update_staff_role(session, interaction.guild.id, role.id)
            await interaction.response.send_message(
                f"‚úÖ Le r√¥le staff a bien √©t√© configur√© sur **{role.name}**.",
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(f"Une erreur est survenue: {e}", ephemeral=True)
        finally:
            session.close()

    @app_commands.command(name="mep", description="[Staff] Lance la mise en place du Cuisinier dans un salon.")
    @app_commands.describe(salon="Le salon o√π le cuisinier doit s'installer.")
    @is_bot_staff() # Utilise notre d√©corateur personnalis√© pour la permission
    async def mise_en_place(self, interaction: discord.Interaction, salon: discord.TextChannel):
        """Installe le bot et son embed principal dans un salon."""
        session = get_db_session()
        try:
            # Met √† jour la config et s'assure que le cuisinier existe dans la DB
            update_main_channel(session, interaction.guild.id, salon.id)
            cook = get_or_create_cook(session, interaction.guild.id)

            # Cr√©ation de l'embed initial
            embed = discord.Embed(
                title="üë®‚Äçüç≥ Le Cuisinier est dans la place !",
                description="Bonjour ! C'est ici que je vais passer mes journ√©es.\n"
                            "Gardez un ≈ìil sur mes stats et aidez-moi √† aller bien.",
                color=discord.Color.green()
            )
            embed.set_thumbnail(url="https://i.imgur.com/example.png") # Mettez une image de base pour le cuisinier
            embed.add_field(name="‚ö° √ânergie", value=f"{cook.energy}%", inline=True)
            embed.add_field(name="üíß Soif", value=f"{cook.thirst}%", inline=True)
            embed.add_field(name="üçî Faim", value=f"{cook.hunger}%", inline=True)
            embed.add_field(name="üò¥ Sommeil", value=f"{cook.sleep}%", inline=True)
            embed.add_field(name="üß† Craving", value=f"{cook.craving}%", inline=True)
            embed.add_field(name="üí∞ Portefeuille", value=f"{cook.wallet:.2f} $", inline=True)
            embed.set_footer(text="Utilisez les commandes pour interagir avec moi.")

            await salon.send(embed=embed)
            await interaction.response.send_message(
                f"‚úÖ Le cuisinier a √©t√© install√© avec succ√®s dans {salon.mention} !",
                ephemeral=True
            )

        except Exception as e:
            await interaction.response.send_message(f"Une erreur est survenue lors de l'installation: {e}", ephemeral=True)
        finally:
            session.close()

    @mise_en_place.error
    @config_role.error
    async def on_command_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        """G√®re les erreurs de permission pour les commandes de ce cog."""
        if isinstance(error, app_commands.MissingPermissions):
            await interaction.response.send_message(
                "‚õî Vous devez √™tre un administrateur du serveur pour utiliser cette commande.",
                ephemeral=True
            )
        else:
            # G√®re d'autres erreurs potentielles non captur√©es
            await interaction.response.send_message(
                "Une erreur inattendue est survenue.", ephemeral=True
            )
            print(f"Erreur non g√©r√©e dans le cog Admin: {error}")


async def setup(bot: commands.Bot):
    """Fonction requise pour que le bot charge ce cog."""
    await bot.add_cog(Admin(bot))