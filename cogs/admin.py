# --- cogs/admin.py ---

import discord
from discord.ext import commands
from discord import app_commands, ui
from db.database import SessionLocal
from db.models import ServerState, PlayerProfile

import datetime
import math

class AdminCog(commands.Cog):
    """Gestion des configurations du bot et du jeu pour le serveur."""
    def __init__(self, bot):
        self.bot = bot

    # --- Pr√©r√©glages des Modes de Jeu ---
    GAME_MODES = {
        "peaceful": {
            "tick_interval_minutes": 60,
            "rates": {
                "hunger": 5.0, "thirst": 4.0, "bladder": 5.0,
                "energy": 3.0, "stress": 1.0, "boredom": 2.0,
                "addiction_base": 0.05, "toxins_base": 0.1,
            }
        },
        "medium": {
            "tick_interval_minutes": 30,
            "rates": {
                "hunger": 10.0, "thirst": 8.0, "bladder": 15.0,
                "energy": 5.0, "stress": 3.0, "boredom": 7.0,
                "addiction_base": 0.1, "toxins_base": 0.5,
            }
        },
        "hard": {
            "tick_interval_minutes": 15,
            "rates": {
                "hunger": 20.0, "thirst": 16.0, "bladder": 30.0,
                "energy": 10.0, "stress": 6.0, "boredom": 14.0,
                "addiction_base": 0.2, "toxins_base": 1.0,
            }
        }
    }
    
    # --- Pr√©r√©glages des Dur√©es de Partie ---
    GAME_DURATIONS = {
        "short": {"days": 14, "label": "Court (14 jours)"},
        "medium": {"days": 31, "label": "Moyen (31 jours)"},
        "long": {"days": 72, "label": "Long (72 jours)"},
    }

    # -------------------
    # Commandes Admin (Slash Commands)
    # -------------------
    
    @app_commands.command(name="config", description="Configure les param√®tres du bot et du jeu pour le serveur.")
    @app_commands.default_permissions(administrator=True) # Restriction aux administrateurs
    async def config(self, interaction: discord.Interaction):
        """Affiche l'interface de configuration principale."""
        guild_id_str = str(interaction.guild.id)
        db = SessionLocal()
        state = db.query(ServerState).filter_by(guild_id=guild_id_str).first()

        # Si aucun √©tat de serveur n'existe pour ce serveur, en cr√©er un.
        if not state:
            state = ServerState(guild_id=guild_id_str)
            db.add(state)
            db.commit() 
            state = db.query(ServerState).filter_by(guild_id=guild_id_str).first() # Recharger pour les valeurs par d√©faut

        # Envoyer le message interactif principal
        await interaction.response.send_message(
            embed=self.generate_config_menu_embed(state),
            view=self.generate_config_menu_view(guild_id_str),
            ephemeral=True 
        )
        db.close()

    # --- M√©thodes pour G√©n√©rer les Embeds et Vues de Configuration ---
    
    def generate_config_menu_embed(self, state: ServerState) -> discord.Embed:
        """G√©n√®re l'embed principal affichant l'√©tat actuel des configurations."""
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration du Bot et du Jeu",
            description="Utilisez les boutons ci-dessous pour ajuster les param√®tres du serveur.",
            color=discord.Color.blue()
        )

        # Section Statut G√©n√©ral
        embed.add_field(
            name="‚ñ∂Ô∏è **Statut G√©n√©ral**",
            value=f"**Jeu :** `{'En cours' if state.game_started else 'Non lanc√©e'}`\n"
                  f"**Mode :** `{state.game_mode.capitalize() if state.game_mode else 'Medium (Standard)'}`\n"
                  f"**Dur√©e :** `{self.GAME_DURATIONS.get(state.duration_key, {}).get('label', 'Moyen (31 jours)') if state.duration_key else 'Moyen (31 jours)'}`",
            inline=False
        )

        # Section Configuration du Serveur
        admin_role_mention = f"<@&{state.admin_role_id}>" if state.admin_role_id else "Non d√©fini"
        notification_role_mention = f"<@&{state.notification_role_id}>" if hasattr(state, 'notification_role_id') and state.notification_role_id else "Non d√©fini"
        game_channel_mention = f"<#{state.game_channel_id}>" if state.game_channel_id else "Non d√©fini"
        
        embed.add_field(
            name="üìç **Configuration du Serveur**",
            value=f"**R√¥le Admin :** {admin_role_mention}\n"
                  f"**R√¥le Notification :** {notification_role_mention}\n"
                  f"**Salon de Jeu :** {game_channel_mention}",
            inline=False
        )

        # Section Param√®tres du Jeu
        tick_interval = state.game_tick_interval_minutes if state.game_tick_interval_minutes is not None else 30 # Valeur par d√©faut pour l'affichage
        embed.add_field(
            name="‚è±Ô∏è **Param√®tres du Jeu**",
            value=f"**Intervalle Tick (min) :** `{tick_interval}`",
            inline=False
        )
        
        # Section D√©gradations par Tick (plus structur√©e)
        embed.add_field(
            name="üìâ **Taux de D√©gradation / Tick**",
            value=f"**Faim :** `{state.degradation_rate_hunger:.1f}` | **Soif :** `{state.degradation_rate_thirst:.1f}` | **Vessie :** `{state.degradation_rate_bladder:.1f}`\n"
                  f"**√ânergie :** `{state.degradation_rate_energy:.1f}` | **Stress :** `{state.degradation_rate_stress:.1f}` | **Ennui :** `{state.degradation_rate_boredom:.1f}`",
            inline=False
        )
        
        embed.set_footer(text="Utilisez les boutons ci-dessous pour naviguer et modifier les param√®tres.")
        return embed

    # --- Bouton pour lancer la sous-vue de s√©lection du Mode et Dur√©e ---
    class SetupGameModeButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int):
            super().__init__(label=label, style=style, row=row) 
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            cog = interaction.client.get_cog("AdminCog")
            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                return
            # Mise √† jour du message pour montrer la vue de s√©lection de mode/dur√©e
            await interaction.response.edit_message(
                embed=cog.generate_setup_game_mode_embed(),
                view=cog.generate_setup_game_mode_view(self.guild_id)
            )

    # --- Embed pour la s√©lection du Mode de Jeu et Dur√©e ---
    def generate_setup_game_mode_embed(self) -> discord.Embed:
        embed = discord.Embed(
            title="üéÆ Configuration du Mode et de la Dur√©e",
            description="S√©lectionnez un mode de difficult√© et une dur√©e pour la partie.",
            color=discord.Color.teal()
        )
        return embed

    # --- View pour la s√©lection du Mode de Jeu et Dur√©e ---
    def generate_setup_game_mode_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.GameModeSelect(guild_id, "mode", row=0)) 
        view.add_item(self.GameDurationSelect(guild_id, "duration", row=1)) 
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=2))
        return view

    # --- Classe de Menu: Mode de Difficult√© (Peaceful, Medium, Hard) ---
    class GameModeSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int):
            options = [
                discord.SelectOption(label="Peaceful", description="Taux de d√©gradation bas.", value="peaceful"),
                discord.SelectOption(label="Medium (Standard)", description="Taux de d√©gradation standard.", value="medium"),
                discord.SelectOption(label="Hard", description="Taux de d√©gradation √©lev√©s. Plus difficile.", value="hard")
            ]
            super().__init__(placeholder="Choisissez le mode de difficult√©...", options=options, custom_id=f"select_gamemode_{guild_id}", row=row)
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            selected_mode = self.values[0]
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                cog = interaction.client.get_cog("AdminCog")
                mode_data = cog.GAME_MODES.get(selected_mode)

                if mode_data:
                    state.game_mode = selected_mode
                    state.game_tick_interval_minutes = mode_data["tick_interval_minutes"]
                    for key, value in mode_data["rates"].items():
                        setattr(state, f"degradation_rate_{key}", value)
                
                    db.commit()
                    
                    embed = cog.generate_setup_game_mode_embed()
                    embed.description = f"‚úÖ Mode de difficult√© d√©fini sur **{selected_mode.capitalize()}**.\n" + embed.description
                    
                    await interaction.response.edit_message(embed=embed, view=cog.generate_setup_game_mode_view(self.guild_id))
            
            db.close()

    # --- Classe de Menu: Dur√©e de Partie (Short, Medium, Long) ---
    class GameDurationSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int):
            options = [
                discord.SelectOption(label=data["label"], value=key)
                for key, data in AdminCog.GAME_DURATIONS.items()
            ]
            super().__init__(placeholder="Choisissez la dur√©e de la partie...", options=options, custom_id=f"select_gameduration_{guild_id}", row=row)
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            selected_duration_key = self.values[0]
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                cog = interaction.client.get_cog("AdminCog")
                if not cog:
                    await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                    db.close()
                    return
                    
                duration_data = cog.GAME_DURATIONS.get(selected_duration_key)
                
                if duration_data:
                    state.duration_key = selected_duration_key 
                    db.commit()
                    
                    embed = cog.generate_setup_game_mode_embed()
                    embed.description = f"‚úÖ Dur√©e de la partie d√©finie sur **{duration_data['label']}**.\n" + embed.description
                    await interaction.response.edit_message(embed=embed, view=cog.generate_setup_game_mode_view(self.guild_id))

            db.close()
            
    # --- Bouton de retour vers le Menu Principal des Param√®tres ---
    class BackButton(ui.Button): 
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int = 0):
            super().__init__(label=label, style=style, row=row)
            self.guild_id = guild_id
            
        async def callback(self, interaction: discord.Interaction):
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=str(self.guild_id)).first()
            cog = interaction.client.get_cog("AdminCog")

            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                db.close()
                return
            
            # Retourner √† la VUE GENERALE DES SETTINGS
            await interaction.response.edit_message(
                embed=cog.generate_config_menu_embed(state), # Utiliser l'embed principal
                view=cog.generate_config_menu_view(self.guild_id)      
            )
            db.close()

    # --- Classe g√©n√©rique pour les boutons de configuration ---
    class ConfigButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int):
            super().__init__(label=label, style=style, row=row)
            self.guild_id = guild_id
            self.label = label

        async def callback(self, interaction: discord.Interaction):
            cog = interaction.client.get_cog("AdminCog")
            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=str(self.guild_id)).first()

            if self.label == "üéÆ Lancer/Reinitialiser Partie":
                if state:
                    state.game_started = not state.game_started
                    state.game_start_time = datetime.datetime.utcnow() if state.game_started else None
                    db.commit()
                    
                    await interaction.response.edit_message(
                        embed=cog.generate_config_menu_embed(state),
                        view=cog.generate_config_menu_view(self.guild_id)
                    )
                    await interaction.followup.send(f"La partie a √©t√© {'lanc√©e' if state.game_started else 'arr√™t√©e/r√©initialis√©e'}.", ephemeral=True)
                else:
                    await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur.", ephemeral=True)

            elif self.label == "üíæ Sauvegarder l'√âtat":
                await interaction.response.edit_message(
                    embed=cog.generate_config_menu_embed(state),
                    view=cog.generate_config_menu_view(self.guild_id)
                )
                await interaction.followup.send("L'√©tat actuel a √©t√© sauvegard√©.", ephemeral=True)

            elif self.label == "üìä Voir Statistiques":
                await interaction.response.edit_message(
                    embed=cog.generate_stats_embed(self.guild_id),
                    view=cog.generate_stats_view(self.guild_id)
                )
                await interaction.followup.send("Affichage des statistiques...", ephemeral=True)

            elif self.label == "üîî Notifications":
                await interaction.response.edit_message(
                    embed=cog.generate_notifications_embed(self.guild_id),
                    view=cog.generate_notifications_view(self.guild_id)
                )
                await interaction.followup.send("Configuration des notifications...", ephemeral=True)

            elif self.label == "üõ†Ô∏è Options Avanc√©es":
                await interaction.response.edit_message(
                    embed=cog.generate_advanced_options_embed(self.guild_id),
                    view=cog.generate_advanced_options_view(self.guild_id)
                )
                await interaction.followup.send("Acc√®s aux options avanc√©es...", ephemeral=True)

            db.close()

    # --- Classe pour le bouton qui va ouvrir la configuration des r√¥les et salons ---
    class GeneralConfigButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int):
            super().__init__(label=label, style=style, row=row) 
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            cog = interaction.client.get_cog("AdminCog")
            if not cog:
                await interaction.response.send_message("Erreur: Le cog Admin n'est pas charg√©.", ephemeral=True)
                return
            
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            await interaction.response.edit_message(
                embed=cog.generate_role_and_channel_config_embed(state),
                view=cog.generate_general_config_view(self.guild_id)
            )
            db.close()

    # --- M√©thodes pour les configurations sp√©cifiques (R√¥le Admin, Salon, R√¥le Notif) ---
    
    # M√©thode pour g√©n√©rer l'embed de configuration du r√¥le admin et du salon de jeu
    def generate_role_and_channel_config_embed(self, state: ServerState) -> discord.Embed:
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration G√©n√©rale (R√¥les & Salons)",
            description="Utilisez les menus d√©roulants pour s√©lectionner les r√¥les et salons.",
            color=discord.Color.purple()
        )
        current_admin_role = f"<@&{state.admin_role_id}>" if state.admin_role_id else "Non d√©fini"
        current_notif_role = f"<@&{state.notification_role_id}>" if hasattr(state, 'notification_role_id') and state.notification_role_id else "Non d√©fini"
        current_game_channel = f"<#{state.game_channel_id}>" if state.game_channel_id else "Non d√©fini"

        embed.add_field(name="üëë R√¥le Admin", value=current_admin_role, inline=False)
        embed.add_field(name="üîî R√¥le de Notification", value=current_notif_role, inline=False)
        embed.add_field(name="üéÆ Salon de Jeu", value=current_game_channel, inline=False)
        return embed

    # Vue pour la s√©lection des r√¥les et du salon
    def generate_general_config_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.RoleSelect(guild_id, "admin_role", row=0))
        view.add_item(self.RoleSelect(guild_id, "notification_role", row=1))
        view.add_item(self.ChannelSelect(guild_id, "game_channel", row=2))
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3))
        return view

    # Classe de Menu: S√©lection de R√¥le
    class RoleSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int):
            placeholder = f"S√©lectionnez le r√¥le pour {'l\'administration' if select_type == 'admin_role' else 'les notifications'}..."
            super().__init__(placeholder=placeholder, options=[], custom_id=f"select_role_{select_type}_{guild_id}", row=row)
            self.guild_id = guild_id
            self.select_type = select_type

        # On charge les options dans on_ready ou quand le cog est charg√©, mais ici pour simplifier, on les charge √† la vol√©e.
        # Dans un vrai bot, il serait mieux de les charger une fois.
        async def load_options(self, interaction: discord.Interaction):
            guild = interaction.guild
            if guild:
                roles = sorted(guild.roles, key=lambda r: r.position, reverse=True)
                self.options = [
                    discord.SelectOption(label=role.name, value=str(role.id))
                    for role in roles if role.name != "@everyone"
                ]
            else:
                self.options = [discord.SelectOption(label="Serveur introuvable", value="error")]

        async def callback(self, interaction: discord.Interaction):
            if not self.options: # Charger les r√¥les si ce n'est pas d√©j√† fait
                await self.load_options(interaction)

            if self.values[0] == "error":
                await interaction.response.send_message("Erreur lors du chargement des r√¥les.", ephemeral=True)
                return

            selected_role_id = self.values[0]
            
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                if self.select_type == "admin_role":
                    state.admin_role_id = selected_role_id
                elif self.select_type == "notification_role":
                    if hasattr(state, 'notification_role_id'):
                        state.notification_role_id = selected_role_id
                    else:
                        await interaction.response.send_message("Erreur: L'attribut 'notification_role_id' n'est pas d√©fini.", ephemeral=True)
                        db.close()
                        return
                
                db.commit()

                cog = interaction.client.get_cog("AdminCog")
                await interaction.response.edit_message(
                    embed=cog.generate_role_and_channel_config_embed(state),
                    view=cog.generate_general_config_view(self.guild_id)
                )
                await interaction.followup.send(f"R√¥le pour {'l\'administration' if self.select_type == 'admin_role' else 'les notifications'} mis √† jour.", ephemeral=True)
            
            db.close()

    # Classe de Menu: S√©lection de Salon
    class ChannelSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int):
            placeholder = f"S√©lectionnez le salon pour le jeu..."
            super().__init__(placeholder=placeholder, options=[], custom_id=f"select_channel_{select_type}_{guild_id}", row=row) 
            self.guild_id = guild_id
            self.select_type = select_type

        async def load_options(self, interaction: discord.Interaction):
            guild = interaction.guild
            if guild:
                channels = sorted(guild.text_channels, key=lambda c: c.position)
                self.options = [
                    discord.SelectOption(label=channel.name, value=str(channel.id))
                    for channel in channels
                ]
            else:
                self.options = [discord.SelectOption(label="Serveur introuvable", value="error")]

        async def callback(self, interaction: discord.Interaction):
            if not self.options:
                await self.load_options(interaction)

            if self.values[0] == "error":
                await interaction.response.send_message("Erreur lors du chargement des salons.", ephemeral=True)
                return

            selected_channel_id = self.values[0]
            
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                if self.select_type == "game_channel":
                    state.game_channel_id = selected_channel_id
                
                db.commit()

                cog = interaction.client.get_cog("AdminCog")
                await interaction.response.edit_message(
                    embed=cog.generate_role_and_channel_config_embed(state),
                    view=cog.generate_general_config_view(self.guild_id)
                )
                await interaction.followup.send(f"Salon de jeu mis √† jour.", ephemeral=True)
            
            db.close()

    # --- M√©thodes pour les autres configurations (Statistiques, Notifications, Avanc√©es) ---
    def generate_stats_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üìä Statistiques du Serveur", description="Fonctionnalit√© en d√©veloppement.", color=discord.Color.purple())
        return embed
    
    def generate_stats_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3))
        return view

    def generate_notifications_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üîî Param√®tres de Notifications", description="Configurez les r√¥les pour les notifications du jeu. (Fonctionnalit√© en d√©veloppement)", color=discord.Color.green())
        return embed
    
    def generate_notifications_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3))
        return view

    def generate_advanced_options_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üõ†Ô∏è Options Avanc√©es", description="Fonctionnalit√© en d√©veloppement.", color=discord.Color.grey())
        return embed
    
    def generate_advanced_options_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3))
        return view

    # Remplacement de l'ancienne m√©thode generate_config_menu_view pour int√©grer les nouveaux boutons
    def generate_config_menu_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        
        # Ligne 0 : Mode & Dur√©e, Lancer/Reinitialiser, Sauvegarder
        view.add_item(self.SetupGameModeButton("üïπÔ∏è Mode & Dur√©e", guild_id, discord.ButtonStyle.primary, row=0))
        view.add_item(self.ConfigButton("üéÆ Lancer/Reinitialiser Partie", guild_id, discord.ButtonStyle.success, row=0))
        view.add_item(self.ConfigButton("üíæ Sauvegarder l'√âtat", guild_id, discord.ButtonStyle.blurple, row=0))
        
        # Ligne 1 : R√¥les & Salons, Statistiques
        view.add_item(self.GeneralConfigButton("‚öôÔ∏è R√¥les & Salons", guild_id, discord.ButtonStyle.grey, row=1)) 
        view.add_item(self.ConfigButton("üìä Voir Statistiques", guild_id, discord.ButtonStyle.gray, row=1))
        
        # Ligne 2 : Notifications, Options Avanc√©es
        view.add_item(self.ConfigButton("üîî Notifications", guild_id, discord.ButtonStyle.green, row=2))
        view.add_item(self.ConfigButton("üõ† Options Avanc√©es", guild_id, discord.ButtonStyle.secondary, row=2))
        
        # Ligne 3 : Bouton retour final
        view.add_item(self.BackButton("‚¨Ö Retour", guild_id, discord.ButtonStyle.red, row=3))
        
        return view


async def setup(bot):
    await bot.add_cog(AdminCog(bot))