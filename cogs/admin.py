# --- cogs/admin.py ---

import discord
from discord.ext import commands, ui # Importez 'ui' pour les SelectMenus et Modals
from discord import app_commands # Pour les slash commands
from db.database import SessionLocal # Assurez-vous que c'est l'import correct de votre SessionLocal
from db.models import ServerState, PlayerProfile # N√©cessaire si vous devez cr√©er des profils ou charger des √©tats

import datetime
import math # Peut √™tre utile pour les calculs de temps, non utilis√© directement dans ce snippet UI

class AdminCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # server_channels n'est pas utilis√© directement ici car la DB g√®re l'√©tat du serveur
        # self.server_channels = {} 

    # --- Pr√©r√©glages des Modes de Jeu ---
    GAME_MODES = {
        "peaceful": {
            "tick_interval_minutes": 60,
            "rates": {
                "hunger": 5.0, "thirst": 4.0, "bladder": 5.0,
                "energy": 3.0, "stress": 1.0, "boredom": 2.0,
                "addiction_base": 0.05, "toxins_base": 0.1,
            }
        },
        "medium": {
            "tick_interval_minutes": 30,
            "rates": {
                "hunger": 10.0, "thirst": 8.0, "bladder": 15.0,
                "energy": 5.0, "stress": 3.0, "boredom": 7.0,
                "addiction_base": 0.1, "toxins_base": 0.5,
            }
        },
        "hard": {
            "tick_interval_minutes": 15,
            "rates": {
                "hunger": 20.0, "thirst": 16.0, "bladder": 30.0,
                "energy": 10.0, "stress": 6.0, "boredom": 14.0,
                "addiction_base": 0.2, "toxins_base": 1.0,
            }
        }
    }
    
    # --- Pr√©r√©glages des Dur√©es de Partie ---
    GAME_DURATIONS = {
        "short": {"days": 14, "label": "Court (14 jours)"},
        "medium": {"days": 31, "label": "Moyen (31 jours)"},
        "long": {"days": 72, "label": "Long (72 jours)"},
    }

    # -------------------
    # Commandes Admin (Slash Commands)
    # -------------------
    
    @app_commands.command(name="config", description="Configure les param√®tres du bot et du jeu pour le serveur.")
    @app_commands.default_permissions(administrator=True) # Restriction aux administrateurs
    async def config(self, interaction: discord.Interaction):
        """Affiche l'interface de configuration principale."""
        guild_id_str = str(interaction.guild.id)
        db = SessionLocal()
        state = db.query(ServerState).filter_by(guild_id=guild_id_str).first()

        # Si aucun √©tat de serveur n'existe pour ce serveur, en cr√©er un.
        if not state:
            state = ServerState(guild_id=guild_id_str)
            db.add(state)
            db.commit() # Assurer que l'enregistrement est cr√©√© en DB
            # Recharger pour obtenir les valeurs par d√©faut correctement assign√©es par SQLAlchemy.
            state = db.query(ServerState).filter_by(guild_id=guild_id_str).first()

        # Envoyer le message interactif principal
        await interaction.response.send_message(
            embed=self.generate_config_menu_embed(state),
            view=self.generate_config_menu_view(guild_id_str),
            ephemeral=True # Rendre le message visible seulement pour l'utilisateur qui lance la commande
        )
        db.close()

    # --- M√©thodes pour G√©n√©rer les Embeds et Vues de Configuration ---
    
    def generate_config_menu_embed(self, state: ServerState) -> discord.Embed:
        """G√©n√®re l'embed principal affichant l'√©tat actuel des configurations."""
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration du Bot et du Jeu",
            description="S√©lectionnez une section √† configurer ci-dessous.",
            color=discord.Color.blue()
        )

        # Informations sur la configuration du Bot
        admin_role_mention = f"<@&{state.admin_role_id}>" if state.admin_role_id else "Non d√©fini"
        game_channel_mention = f"<#{state.game_channel_id}>" if state.game_channel_id else "Non d√©fini"
        game_status = "En cours" if state.game_started else "Non lanc√©e"

        embed.add_field(name="üëë R√¥le Admin", value=admin_role_mention, inline=False)
        embed.add_field(name="üéÆ Salon de Jeu Principal", value=game_channel_mention, inline=False)
        embed.add_field(name="‚ñ∂Ô∏è Statut du Jeu", value=game_status, inline=False)
        
        # Informations sur la configuration du Jeu (mode et dur√©e)
        mode_label = state.game_mode.capitalize() if state.game_mode else "Medium (Standard)"
        duration_label = self.GAME_DURATIONS.get(state.duration_key, {}).get("label", "Moyen (31 jours)") if state.duration_key else "Moyen (31 jours)"

        embed.add_field(name="‚ú® Mode de Difficult√©", value=mode_label, inline=True)
        embed.add_field(name="‚è±Ô∏è Dur√©e de Partie", value=duration_label, inline=True)
        
        embed.add_field(name="‚è∞ Intervalle Tick (min)", value=f"{state.game_tick_interval_minutes}" if state.game_tick_interval_minutes is not None else "30 (D√©faut)", inline=False)
        embed.add_field(name="‚¨áÔ∏è D√©grad. Faim/Tick", value=f"{state.degradation_rate_hunger:.1f}", inline=True)
        embed.add_field(name="‚¨áÔ∏è D√©grad. Soif/Tick", value=f"{state.degradation_rate_thirst:.1f}", inline=True)
        embed.add_field(name="‚¨áÔ∏è D√©grad. Vessie/Tick", value=f"{state.degradation_rate_bladder:.1f}", inline=False)
        embed.add_field(name="‚¨áÔ∏è D√©grad. √ânergie/Tick", value=f"{state.degradation_rate_energy:.1f}", inline=True)
        embed.add_field(name="‚¨ÜÔ∏è D√©grad. Stress/Tick", value=f"{state.degradation_rate_stress:.1f}", inline=True)
        embed.add_field(name="‚¨ÜÔ∏è D√©grad. Ennui/Tick", value=f"{state.degradation_rate_boredom:.1f}", inline=True)
        
        embed.set_footer(text="Utilisez les boutons ci-dessous pour ajuster les param√®tres.")
        return embed

    def generate_config_menu_view(self, guild_id: str) -> discord.ui.View:
        """G√©n√®re la vue des boutons pour le menu principal de configuration."""
        view = discord.ui.View(timeout=None) # Laisser la vue persistante
        
        # Bouton pour lancer la s√©lection du mode et de la dur√©e
        view.add_item(self.SetupGameModeButton("üïπÔ∏è Mode & Dur√©e", guild_id, discord.ButtonStyle.primary))
        
        # Boutons pour les autres configurations (Lancer, Sauvegarder, Statistiques, etc.)
        view.add_item(self.ConfigButton("üéÆ Lancer/Reinitialiser Partie", guild_id, discord.ButtonStyle.success, row=0))
        view.add_item(self.ConfigButton("üíæ Sauvegarder l'√âtat", guild_id, discord.ButtonStyle.blurple, row=0))
        view.add_item(self.ConfigButton("üìä Voir Statistiques", guild_id, discord.ButtonStyle.gray, row=1))
        view.add_item(self.ConfigButton("üîî Notifications", guild_id, discord.ButtonStyle.green, row=1))
        view.add_item(self.ConfigButton("üõ† Options Avanc√©es", guild_id, discord.ButtonStyle.secondary, row=2))
        
        # Bouton retour √† la configuration principale
        view.add_item(self.BackButton("‚¨Ö Retour", guild_id, discord.ButtonStyle.red, row=3))
        
        return view

    # --- Bouton pour lancer la sous-vue de s√©lection du Mode et Dur√©e ---
    class SetupGameModeButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle):
            super().__init__(label=label, style=style, row=0) # Ligne 0 pour les premiers boutons
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            cog = interaction.client.get_cog("AdminCog")
            # Mise √† jour du message pour montrer la vue de s√©lection de mode/dur√©e
            await interaction.response.edit_message(
                embed=cog.generate_setup_game_mode_embed(),
                view=cog.generate_setup_game_mode_view(self.guild_id)
            )

    # --- Embed pour la s√©lection du Mode de Jeu et Dur√©e ---
    def generate_setup_game_mode_embed(self) -> discord.Embed:
        embed = discord.Embed(
            title="üéÆ Configuration du Mode de Jeu et de la Dur√©e",
            description="S√©lectionnez un mode de difficult√© et une dur√©e pour la partie. Ces param√®tres seront sauvegard√©s pour le serveur.",
            color=discord.Color.teal()
        )
        return embed

    # --- View pour la s√©lection du Mode de Jeu et Dur√©e ---
    def generate_setup_game_mode_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        
        # Menu d√©roulant pour le mode de difficult√©
        mode_select = self.GameModeSelect(guild_id, "mode")
        view.add_item(mode_select)

        # Menu d√©roulant pour la dur√©e
        duration_select = self.GameDurationSelect(guild_id, "duration")
        view.add_item(duration_select)

        # Bouton pour retourner √† la vue des param√®tres de jeu g√©n√©raux
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=2)) # row=2 pour la ligne apr√®s les menus
        
        return view

    # --- Classe de Menu: Mode de Difficult√© (Peaceful, Medium, Hard) ---
    class GameModeSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str):
            # Cr√©ation des options pour le menu d√©roulant
            options = [
                discord.SelectOption(label="Peaceful", description="Taux de d√©gradation bas.", value="peaceful"),
                discord.SelectOption(label="Medium (Standard)", description="Taux de d√©gradation standard.", value="medium"),
                discord.SelectOption(label="Hard", description="Taux de d√©gradation √©lev√©s. Plus difficile.", value="hard")
            ]
            # Le 'row=0' est d√©fini dans __init__ de SetupGameModeButton, on peut le r√©p√©ter ici pour √™tre explicite
            super().__init__(placeholder="Choisissez le mode de difficult√©...", options=options, custom_id=f"select_gamemode_{guild_id}", row=0)
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            selected_mode = self.values[0]
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                cog = interaction.client.get_cog("AdminCog")
                mode_data = cog.GAME_MODES.get(selected_mode)

                if mode_data: # Si le mode choisi existe bien dans GAME_MODES
                    state.game_mode = selected_mode
                    state.game_tick_interval_minutes = mode_data["tick_interval_minutes"]
                    # Mettre √† jour tous les taux de d√©gradation associ√©s au mode
                    for key, value in mode_data["rates"].items():
                        setattr(state, f"degradation_rate_{key}", value)
                
                    db.commit() # Sauvegarder les changements en base de donn√©es
                    
                    # Mettre √† jour le message pour montrer le choix effectu√©
                    embed = cog.generate_setup_game_mode_embed()
                    embed.description = f"‚úÖ Mode de difficult√© d√©fini sur **{selected_mode.capitalize()}**.\n" + embed.description
                    
                    await interaction.response.edit_message(embed=embed, view=cog.generate_setup_game_mode_view(self.guild_id))
            
            db.close()

    # --- Classe de Menu: Dur√©e de Partie (Short, Medium, Long) ---
    class GameDurationSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str):
            cog = commands.bot.Bot.get_cog("AdminCog") 
            if not cog: # V√©rification de s√©curit√© au cas o√π le cog n'est pas charg√©
                return 
            
            options = []
            # Cr√©er les options du menu √† partir des dur√©es pr√©d√©finies
            for key, data in cog.GAME_DURATIONS.items():
                options.append(discord.SelectOption(label=data["label"], value=key, description=f"Dur√©e totale estim√©e de la partie : {data['days']} jours"))
                
            super().__init__(placeholder="Choisissez la dur√©e de la partie...", options=options, custom_id=f"select_gameduration_{guild_id}", row=1) # row=1 pour la 2√®me ligne
            self.guild_id = guild_id

        async def callback(self, interaction: discord.Interaction):
            selected_duration_key = self.values[0] # Cl√© comme "short", "medium", "long"
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                cog = interaction.client.get_cog("AdminCog")
                duration_data = cog.GAME_DURATIONS.get(selected_duration_key)
                
                if duration_data:
                    # Sauvegarder la cl√© de dur√©e choisie.
                    # NOTE: Le nombre de jours en lui-m√™me (duration_data["days"]) n'est pas directement sauvegard√© dans un champ ici.
                    # On le lit depuis les pr√©-sets quand on en a besoin. Si vous voulez le sauvegarder pour usage futur,
                    # ajoutez `game_duration_days` dans models.py et sauvegardez l√†.
                    state.duration_key = selected_duration_key 

                    db.commit()
                    
                    # Mettre √† jour le message pour refl√©ter la s√©lection
                    embed = cog.generate_setup_game_mode_embed()
                    embed.description = f"‚úÖ Dur√©e de la partie d√©finie sur **{duration_data['label']}**.\n" + embed.description
                    await interaction.response.edit_message(embed=embed, view=cog.generate_setup_game_mode_view(self.guild_id))

            db.close()
            
    # --- Bouton de retour vers le Menu Principal des Param√®tres (g√©n√©ral, pas juste mode/dur√©e) ---
    class BackButton(ui.Button): # Le nom "BackButton" est correct, car c'est le retour par d√©faut
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int = 0): # Vous avez d√©j√† mis 'row' ici, c'est bien
            super().__init__(label=label, style=style, row=row)
            self.guild_id = guild_id
            
        async def callback(self, interaction: discord.Interaction):
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=str(self.guild_id)).first()
            cog = interaction.client.get_cog("AdminCog") # Recup√©rer le cog Admin
            
            # Ici, on retourne √† la VUE GENERALE DES SETTINGS (/config menu)
            await interaction.response.edit_message(
                embed=cog.generate_server_config_embed(self.guild_id), # Remettre l'embed principal des SETTINGS
                view=cog.generate_config_menu_view(self.guild_id)      # et la vue principale des SETTINGS
            )
            db.close()

    # --- Autres M√©thodes Embeds/Vues (les appels vers celles-ci depuis le callback des boutons ConfigButton doivent √™tre ok) ---

    # (Assurez-vous que les autres m√©thodes comme generate_server_config_embed, generate_game_settings_embed etc. sont bien pr√©sentes dans cette classe AdminCog)

    def generate_server_config_embed(self, guild_id: str) -> discord.Embed: # Guild_id doit √™tre string si utilis√© pour filtres DB
        db = SessionLocal()
        state = db.query(ServerState).filter_by(guild_id=guild_id).first() # OK, mais guild_id_str sera plus s√ªr
        db.close()

        if not state:
            # ... (gestion √©tat absent) ...
            desc = "Aucune partie n'est encore initialis√©e pour ce serveur. Configurez les param√®tres pour d√©marrer."
            embed = discord.Embed(title="‚öôÔ∏è Param√®tres du Serveur", description=desc, color=0x44ff44)
            return embed

        embed = discord.Embed(title=f"‚öôÔ∏è Param√®tres du serveur {guild_id}", color=0x44ff44)
        # Ajout du mode et de la dur√©e aux informations affich√©es ici
        mode_label = state.game_mode.capitalize() if state.game_mode else "Medium (Standard)"
        duration_label = self.GAME_DURATIONS.get(state.duration_key, {}).get("label", "Moyen (31 jours)") if state.duration_key else "Moyen (31 jours)"
        
        embed.add_field(name="Mode de Difficult√©", value=mode_label, inline=True)
        embed.add_field(name="Dur√©e de Partie", value=duration_label, inline=True)
        embed.add_field(name="Intervalle Tick (min)", value=f"{state.game_tick_interval_minutes}" if state.game_tick_interval_minutes is not None else "30", inline=False)
        
        # ... (reste des fields pour SATATS GLOBALES et les RATES s'ils doivent √™tre affich√©s ici, ou sur une autre page "options avanc√©es") ...

        return embed

    def generate_game_settings_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        
        # Bouton pour lancer la s√©lection du mode et de la dur√©e (UI d√©di√©e)
        view.add_item(self.SetupGameModeButton("üïπÔ∏è Mode & Dur√©e", guild_id, discord.ButtonStyle.primary))
        
        # Les autres boutons pour lancer, sauvegarder, etc.
        view.add_item(self.ConfigButton("üéÆ Lancer/R√©initialiser Partie", guild_id, discord.ButtonStyle.green, row=0))
        view.add_item(self.ConfigButton("üíæ Sauvegarder l'√âtat", guild_id, discord.ButtonStyle.blurple, row=0))
        view.add_item(self.ConfigButton("üìä Voir Statistiques", guild_id, discord.ButtonStyle.gray, row=1))
        view.add_item(self.ConfigButton("üîî Notifications", guild_id, discord.ButtonStyle.green, row=1))
        view.add_item(self.ConfigButton("üõ† Options Avanc√©es", guild_id, discord.ButtonStyle.secondary, row=2))
        
        # Bouton Retour aux param√®tres g√©n√©raux, et non pas √† l'embed /config principal
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres", guild_id, discord.ButtonStyle.red, row=3))
        
        return view
    
    # Les classes de boutons/selects (ConfigButton, BackButton, GameModeSelect, GameDurationSelect, SetupGameModeButton)
    # doivent TOUTES √™tre D√âFINIES DANS CETTE CLASSE AdminCog, ET ELLES Y SONT CORRECTEMENT D√âFINIES.
    # Donc, si elles ne causent pas d'erreur (type "row argument unexpected"), la structure est bonne.
    # Si vous les aviez mises √† l'ext√©rieur de la classe AdminCog par erreur, c'est l√† qu'il faudrait les rentrer.
    # Vu l'historique des erreurs, je pense qu'elles sont d√©j√† √† l'int√©rieur des classes.


    # --- Il FAUT TOUJOURS appeler le setup √† la fin ---
async def setup(bot):
    await bot.add_cog(AdminCog(bot))