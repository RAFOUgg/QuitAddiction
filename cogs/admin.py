# --- cogs/admin.py ---

import discord
from discord.ext import commands
from discord import app_commands, ui
from db.database import SessionLocal
from db.models import ServerState, PlayerProfile
import hashlib
import datetime
import math
from typing import List, Tuple, Dict, Optional

# Constante pour le nombre maximum d'options par page
MAX_OPTIONS_PER_PAGE = 25 # Discord limite √† 25 options par SelectMenu
MAX_COMPONENTS_PER_ROW = 5
class AdminCog(commands.Cog):
    """Gestion des configurations du bot et du jeu pour le serveur."""
    def __init__(self, bot):
        self.bot = bot

    # --- Pr√©r√©glages des Modes de Jeu ---
    GAME_MODES = {
        "peaceful": {
            "tick_interval_minutes": 60,
            "rates": {
                "hunger": 5.0, "thirst": 4.0, "bladder": 5.0,
                "energy": 3.0, "stress": 1.0, "boredom": 2.0,
                "addiction_base": 0.05, "toxins_base": 0.1,
            }
        },
        "medium": {
            "tick_interval_minutes": 30,
            "rates": {
                "hunger": 10.0, "thirst": 8.0, "bladder": 15.0,
                "energy": 5.0, "stress": 3.0, "boredom": 7.0,
                "addiction_base": 0.1, "toxins_base": 0.5,
            }
        },
        "hard": {
            "tick_interval_minutes": 15,
            "rates": {
                "hunger": 20.0, "thirst": 16.0, "bladder": 30.0,
                "energy": 10.0, "stress": 6.0, "boredom": 14.0,
                "addiction_base": 0.2, "toxins_base": 1.0,
            }
        }
    }
    
    # --- Pr√©r√©glages des Dur√©es de Partie ---
    GAME_DURATIONS = {
        "short": {"days": 14, "label": "Court (14 jours)"},
        "medium": {"days": 31, "label": "Moyen (31 jours)"},
        "long": {"days": 72, "label": "Long (72 jours)"},
    }

    # Limites pour les labels et valeurs des options de SelectMenu selon Discord API
    MAX_OPTION_LENGTH = 25
    MIN_OPTION_LENGTH = 1

    # -------------------
    # Commandes Admin (Slash Commands)
    # -------------------
    
    @app_commands.command(name="config", description="Configure les param√®tres du bot et du jeu pour le serveur.")
    @app_commands.default_permissions(administrator=True) # Restriction aux administrateurs
    async def config(self, interaction: discord.Interaction):
        """Affiche l'interface de configuration principale."""
        guild_id_str = str(interaction.guild.id)
        db = SessionLocal()
        state = db.query(ServerState).filter_by(guild_id=guild_id_str).first()

        # Si aucun √©tat de serveur n'existe pour ce serveur, en cr√©er un.
        if not state:
            state = ServerState(guild_id=guild_id_str)
            db.add(state)
            db.commit() 
            state = db.query(ServerState).filter_by(guild_id=guild_id_str).first() # Recharger pour les valeurs par d√©faut

        # Envoyer le message interactif principal
        await interaction.response.send_message(
            embed=self.generate_config_menu_embed(state),
            view=self.generate_config_menu_view(guild_id_str, interaction.guild), # Passer le guild
            ephemeral=True 
        )
        db.close()

    # --- M√©thodes pour G√©n√©rer les Embeds et Vues de Configuration ---
    
    def create_options_and_mapping(self, items: list, item_type: str, guild: discord.Guild | None) -> Tuple[List[discord.SelectOption], Dict[str, str]]:
        """
        Cr√©e des options hi√©rarchis√©es et lisibles pour les SelectMenus (r√¥les ou salons).
        - Ajoute des ic√¥nes (üìÅ pour cat√©gories, # pour salons, üîπ pour r√¥les)
        - Ignore les √©l√©ments non pertinents (comme @everyone pour les r√¥les)
        - Fournit un mapping ID hach√© -> ID r√©el
        """
        options = []
        id_mapping = {}

        if not guild:
            return [discord.SelectOption(label="Erreur serveur", value="error_guild", default=True)], {}

        try:
            # --- Trier les items ---
            if item_type == "role":
                # Les r√¥les tri√©s du plus √©lev√© au plus bas
                sorted_items = sorted(items, key=lambda x: x.position, reverse=True)
            elif item_type == "channel":
                # Trier par cat√©gorie puis par position
                sorted_items = sorted(items, key=lambda x: (getattr(x, 'category_id', float('inf')), x.position))
            else:
                sorted_items = items
        except Exception as e:
            print(f"Error sorting {item_type}s: {e}")
            sorted_items = items

        # --- Construire les options ---
        for item in sorted_items:
            item_id = str(item.id)
            item_name = item.name if hasattr(item, 'name') else None

            if not item_id or not item_name:
                continue

            # --- Filtrage pour √©viter le spam ---
            if item_type == "role":
                # Ignore @everyone
                if item.is_default():
                    continue
                label = f"üîπ {item_name}"
            elif item_type == "channel":
                # Ignore les salons vocaux, threads ou cat√©gories directes
                if isinstance(item, discord.CategoryChannel):
                    continue
                if not isinstance(item, discord.TextChannel):
                    continue

                # Ajout hi√©rarchique : Cat√©gorie | #Nom
                category_name = item.category.name if item.category else "Sans cat√©gorie"
                label = f"üìÅ {category_name} | #{item_name}"
            else:
                label = item_name

            # Tronquer √† 25 caract√®res (limite Discord)
            label = label[:25]

            # --- Hachage pour value ---
            hashed_id = hashlib.sha256(item_id.encode()).hexdigest()[:25]

            # --- Ajouter √† la liste ---
            options.append(discord.SelectOption(
                label=label,
                value=hashed_id,
                description=f"ID: {item_id}"  # affich√© en petit sous le label
            ))
            id_mapping[hashed_id] = item_id

        if not options:
            options.append(discord.SelectOption(label="Aucun √©l√©ment trouv√©", value="no_items", default=True))

        return options, id_mapping
    
    def generate_config_menu_embed(self, state: ServerState) -> discord.Embed:
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration du Bot et du Jeu",
            description="Utilisez les boutons ci-dessous pour ajuster les param√®tres du serveur.",
            color=discord.Color.blue()
        )

        embed.add_field(
            name="‚ñ∂Ô∏è **Statut G√©n√©ral**",
            value=f"**Jeu :** `{'En cours' if state.game_started else 'Non lanc√©e'}`\n"
                  f"**Mode :** `{state.game_mode.capitalize() if state.game_mode else 'Medium (Standard)'}`\n"
                  f"**Dur√©e :** `{self.GAME_DURATIONS.get(state.duration_key, {}).get('label', 'Moyen (31 jours)') if state.duration_key else 'Moyen (31 jours)'}`",
            inline=False
        )

        admin_role_mention = f"<@&{state.admin_role_id}>" if state.admin_role_id else "Non d√©fini"
        notification_role_mention = f"<@&{state.notification_role_id}>" if hasattr(state, 'notification_role_id') and state.notification_role_id else "Non d√©fini"
        game_channel_mention = f"<#{state.game_channel_id}>" if state.game_channel_id else "Non d√©fini"
        
        embed.add_field(
            name="üìç **Configuration du Serveur**",
            value=f"**R√¥le Admin :** {admin_role_mention}\n"
                  f"**R√¥le Notification :** {notification_role_mention}\n"
                  f"**Salon de Jeu :** {game_channel_mention}",
            inline=False
        )

        tick_interval = state.game_tick_interval_minutes if state.game_tick_interval_minutes is not None else 30
        
        embed.add_field(
            name="‚è±Ô∏è **Param√®tres du Jeu**",
            value=f"**Intervalle Tick (min) :** `{tick_interval}`",
            inline=False
        )
        
        embed.add_field(
            name="üìâ **Taux de D√©gradation / Tick**",
            value=f"**Faim :** `{state.degradation_rate_hunger:.1f}` | **Soif :** `{state.degradation_rate_thirst:.1f}` | **Vessie :** `{state.degradation_rate_bladder:.1f}`\n"
                  f"**√ânergie :** `{state.degradation_rate_energy:.1f}` | **Stress :** `{state.degradation_rate_stress:.1f}` | **Ennui :** `{state.degradation_rate_boredom:.1f}`",
            inline=False
        )
        
        embed.set_footer(text="Utilisez les boutons ci-dessous pour naviguer et modifier les param√®tres.")
        return embed

    # --- Bouton pour lancer la sous-vue de s√©lection du Mode et Dur√©e ---
    class SetupGameModeButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int, cog: 'AdminCog'): # Ajout de cog
            super().__init__(label=label, style=style, row=row) 
            self.guild_id = guild_id
            self.cog = cog # Stocker l'instance du cog

        async def callback(self, interaction: discord.Interaction):
            await interaction.response.edit_message(
                embed=self.cog.generate_setup_game_mode_embed(),
                view=self.cog.generate_setup_game_mode_view(self.guild_id)
            )

    # --- Embed pour la s√©lection du Mode de Jeu et Dur√©e ---
    def generate_setup_game_mode_embed(self) -> discord.Embed:
        embed = discord.Embed(
            title="üéÆ Configuration du Mode et de la Dur√©e",
            description="S√©lectionnez un mode de difficult√© et une dur√©e pour la partie.",
            color=discord.Color.teal()
        )
        return embed

    # --- View pour la s√©lection du Mode de Jeu et Dur√©e ---
    def generate_setup_game_mode_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.GameModeSelect(guild_id, "mode", row=0, cog=self)) # Passer self
        view.add_item(self.GameDurationSelect(guild_id, "duration", row=1, cog=self)) # Passer self
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=2, cog=self)) # Passer self
        return view

    # --- Classe de Menu: Mode de Difficult√© (Peaceful, Medium, Hard) ---
    class GameModeSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, cog: 'AdminCog'): # Ajout de cog
            options = [
                discord.SelectOption(label="Peaceful", description="Taux de d√©gradation bas.", value="peaceful"),
                discord.SelectOption(label="Medium (Standard)", description="Taux de d√©gradation standard.", value="medium"),
                discord.SelectOption(label="Hard", description="Taux de d√©gradation √©lev√©s. Plus difficile.", value="hard")
            ]
            super().__init__(placeholder="Choisissez le mode de difficult√©...", options=options, custom_id=f"select_gamemode_{guild_id}", row=row)
            self.guild_id = guild_id
            self.cog = cog # Stocker l'instance du cog

        async def callback(self, interaction: discord.Interaction):
            selected_mode = self.values[0] # Assurez-vous que c'est bien self.values[0]
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                mode_data = self.cog.GAME_MODES.get(selected_mode) # Utiliser self.cog

                if mode_data:
                    state.game_mode = selected_mode
                    state.game_tick_interval_minutes = mode_data["tick_interval_minutes"]
                    for key, value in mode_data["rates"].items():
                        setattr(state, f"degradation_rate_{key}", value)
                
                    db.commit()
                    
                    embed = self.cog.generate_setup_game_mode_embed() # Utiliser self.cog
                    embed.description = f"‚úÖ Mode de difficult√© d√©fini sur **{selected_mode.capitalize()}**.\n" + embed.description
                    
                    await interaction.response.edit_message(embed=embed, view=self.cog.generate_setup_game_mode_view(self.guild_id)) # Utiliser self.cog
            
            db.close()

    # --- Classe de Menu: Dur√©e de Partie (Short, Medium, Long) ---
    class GameDurationSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, cog: 'AdminCog'): # Ajout de cog
            options = [
                discord.SelectOption(label=data["label"], value=key)
                for key, data in AdminCog.GAME_DURATIONS.items()
            ]
            super().__init__(placeholder="Choisissez la dur√©e de la partie...", options=options, custom_id=f"select_gameduration_{guild_id}", row=row)
            self.guild_id = guild_id
            self.cog = cog # Stocker l'instance du cog

        async def callback(self, interaction: discord.Interaction):
            selected_duration_key = self.values[0] # Assurez-vous que c'est bien self.values[0]
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                duration_data = self.cog.GAME_DURATIONS.get(selected_duration_key) # Utiliser self.cog
                
                if duration_data:
                    state.duration_key = selected_duration_key 
                    db.commit()
                    
                    embed = self.cog.generate_setup_game_mode_embed() # Utiliser self.cog
                    embed.description = f"‚úÖ Dur√©e de la partie d√©finie sur **{duration_data['label']}**.\n" + embed.description
                    await interaction.response.edit_message(embed=embed, view=self.cog.generate_setup_game_mode_view(self.guild_id)) # Utiliser self.cog

            db.close()
            
    # --- Bouton de retour vers le Menu Principal des Param√®tres ---
    class BackButton(ui.Button): 
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int = 0, cog: 'AdminCog'=None): # Ajout de cog
            super().__init__(label=label, style=style, row=row)
            self.guild_id = guild_id
            self.cog = cog # Stocker l'instance du cog
            
        async def callback(self, interaction: discord.Interaction):
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=str(self.guild_id)).first()
            
            await interaction.response.edit_message(
                embed=self.cog.generate_config_menu_embed(state), # Utiliser self.cog
                view=self.cog.generate_config_menu_view(self.guild_id, interaction.guild) # Utiliser self.cog
            )
            db.close()

    # --- Classe g√©n√©rique pour les boutons de configuration ---
    class ConfigButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int, cog: 'AdminCog'): # Ajout de cog
            super().__init__(label=label, style=style, row=row)
            self.guild_id = guild_id
            self.label = label
            self.cog = cog # Stocker l'instance du cog

        async def callback(self, interaction: discord.Interaction):
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=str(self.guild_id)).first()

            if self.label == "üéÆ Lancer/Reinitialiser Partie":
                if state:
                    state.game_started = not state.game_started
                    state.game_start_time = datetime.datetime.utcnow() if state.game_started else None
                    db.commit()
                    
                    await interaction.response.edit_message(
                        embed=self.cog.generate_config_menu_embed(state), # Utiliser self.cog
                        view=self.cog.generate_config_menu_view(self.guild_id, interaction.guild) # Utiliser self.cog
                    )
                    await interaction.followup.send(f"La partie a √©t√© {'lanc√©e' if state.game_started else 'arr√™t√©e/r√©initialis√©e'}.", ephemeral=True)
                else:
                    await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur.", ephemeral=True)

            elif self.label == "üíæ Sauvegarder l'√âtat":
                # Si vous souhaitez que "Sauvegarder l'√âtat" fasse quelque chose de plus,
                # impl√©mentez la logique ici. Actuellement, il ne fait que rafra√Æchir la vue.
                await interaction.response.edit_message(
                    embed=self.cog.generate_config_menu_embed(state), # Utiliser self.cog
                    view=self.cog.generate_config_menu_view(self.guild_id, interaction.guild) # Utiliser self.cog
                )
                await interaction.followup.send("L'√©tat actuel a √©t√© sauvegard√©.", ephemeral=True) # Message informatif

            elif self.label == "üìä Voir Statistiques":
                await interaction.response.edit_message(
                    embed=self.cog.generate_stats_embed(self.guild_id), # Utiliser self.cog
                    view=self.cog.generate_stats_view(self.guild_id) # Utiliser self.cog
                )
                await interaction.followup.send("Acc√®s aux statistiques...", ephemeral=True) # Message informatif

            elif self.label == "üîî Notifications":
                await interaction.response.edit_message(
                    embed=self.cog.generate_notifications_embed(self.guild_id), # Utiliser self.cog
                    view=self.cog.generate_notifications_view(self.guild_id) # Utiliser self.cog
                )
                await interaction.followup.send("Acc√®s √† la configuration des notifications...", ephemeral=True) # Message informatif

            elif self.label == "üõ†Ô∏è Options Avanc√©es":
                await interaction.response.edit_message(
                    embed=self.cog.generate_advanced_options_embed(self.guild_id), # Utiliser self.cog
                    view=self.cog.generate_advanced_options_view(self.guild_id) # Utiliser self.cog
                )
                await interaction.followup.send("Acc√®s aux options avanc√©es...", ephemeral=True) # Message informatif

            db.close()

    # --- Bouton qui va ouvrir la configuration des r√¥les et salons ---
    class GeneralConfigButton(ui.Button):
        def __init__(self, label: str, guild_id: str, style: discord.ButtonStyle, row: int, cog: 'AdminCog'): # Ajout de cog
            super().__init__(label=label, style=style, row=row) 
            self.guild_id = guild_id
            self.cog = cog # Stocker l'instance du cog

        async def callback(self, interaction: discord.Interaction):
            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            # On passe le guild √† la m√©thode de g√©n√©ration pour qu'elle puisse acc√©der aux r√¥les/canaux
            await interaction.response.edit_message(
                embed=self.cog.generate_role_and_channel_config_embed(state), # Utiliser self.cog
                view=self.cog.generate_general_config_view(self.guild_id, interaction.guild) # Utiliser self.cog
            )
            db.close()

    # --- M√©thodes pour les configurations sp√©cifiques (R√¥le Admin, Salon, R√¥le Notif) ---
    
    def generate_role_and_channel_config_embed(self, state: ServerState) -> discord.Embed:
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration G√©n√©rale (R√¥les & Salons)",
            description="Utilisez les menus d√©roulants pour s√©lectionner les r√¥les et salons.",
            color=discord.Color.purple()
        )
        current_admin_role = f"<@&{state.admin_role_id}>" if state.admin_role_id else "Non d√©fini"
        current_notif_role = f"<@&{state.notification_role_id}>" if hasattr(state, 'notification_role_id') and state.notification_role_id else "Non d√©fini"
        current_game_channel = f"<#{state.game_channel_id}>" if state.game_channel_id else "Non d√©fini"

        embed.add_field(name="üëë R√¥le Admin", value=current_admin_role, inline=False)
        embed.add_field(name="üîî R√¥le de Notification", value=current_notif_role, inline=False)
        embed.add_field(name="üéÆ Salon de Jeu", value=current_game_channel, inline=False)
        return embed

    # --- G√©n√©ration de la vue pour R√¥les et Salons avec pagination pour les salons ---
    def generate_general_config_view(self, guild_id: str, guild: discord.Guild) -> discord.ui.View:
        view = discord.ui.View(timeout=180)

        # --- Pr√©parer les donn√©es ---
        all_roles = guild.roles if guild else []
        role_options, role_id_mapping = self.create_options_and_mapping(all_roles, "role", guild)

        text_channels = [ch for ch in guild.channels if isinstance(ch, discord.TextChannel)] if guild else []
        channel_options, channel_id_mapping = self.create_options_and_mapping(text_channels, "channel", guild)

        # --- Cr√©er les gestionnaires pagin√©s ---
        admin_role_manager = self.PaginatedViewManager(
            guild_id=guild_id, all_options=role_options, id_mapping=role_id_mapping,
            select_type="admin_role", cog=self, initial_page=0
        )
        notification_role_manager = self.PaginatedViewManager(
            guild_id=guild_id, all_options=role_options, id_mapping=role_id_mapping,
            select_type="notification_role", cog=self, initial_page=0
        )
        channel_manager = self.PaginatedViewManager(
            guild_id=guild_id, all_options=channel_options, id_mapping=channel_id_mapping,
            select_type="channel", cog=self, initial_page=0
        )

        # ---------------------
        # Ligne 0 : Admin Role Select
        admin_role_manager.selection_menu.row = 0
        view.add_item(admin_role_manager.selection_menu)

        # Ligne 1 : Pagination Admin (max 2 boutons)
        if admin_role_manager.total_pages > 1:
            admin_role_manager.prev_button.row = 1
            admin_role_manager.next_button.row = 1
            view.add_item(admin_role_manager.prev_button)
            view.add_item(admin_role_manager.next_button)

        # Ligne 2 : Notification Role Select
        notification_role_manager.selection_menu.row = 2
        view.add_item(notification_role_manager.selection_menu)

        # Ligne 3 : Pagination Notification + Channel Select (1+1+5 = 7 > 5) ‚ùå
        # => On met uniquement la s√©lection des channels
        channel_manager.selection_menu.row = 3
        view.add_item(channel_manager.selection_menu)

        # Ligne 4 : Pagination Notification + Channel Pagination + Bouton Retour
        components_line4 = []

        if notification_role_manager.total_pages > 1:
            notification_role_manager.prev_button.row = 4
            notification_role_manager.next_button.row = 4
            components_line4.append(notification_role_manager.prev_button)
            components_line4.append(notification_role_manager.next_button)

        if channel_manager.total_pages > 1:
            channel_manager.prev_button.row = 4
            channel_manager.next_button.row = 4
            components_line4.append(channel_manager.prev_button)
            components_line4.append(channel_manager.next_button)

        # Bouton retour
        back_button = self.BackButton(
            "‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=4, cog=self
        )
        components_line4.append(back_button)

        # Ajouter les composants de la derni√®re ligne
        for comp in components_line4[:5]:  # Discord limite √† 5 par ligne
            view.add_item(comp)

        return view


    # --- Classe de Menu pour la s√©lection des R√¥les ---
    class RoleSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, options: list[discord.SelectOption], id_mapping: dict, cog: 'AdminCog'): # Ajout de cog
            placeholder = f"S√©lectionnez le r√¥le pour {'l\'admin' if select_type == 'admin_role' else 'les notifications'}..."
            placeholder = placeholder[:100] # Assurer que le placeholder ne d√©passe pas 100 caract√®res
            
            # Il faut s'assurer que le nombre d'options ne d√©passe pas 25.
            # Si c'est le cas, on doit soit tronquer, soit impl√©menter une pagination.
            # Ici, on suppose qu'il y a moins de 25 r√¥les.
            
            super().__init__(placeholder=placeholder, options=options[:MAX_OPTIONS_PER_PAGE], custom_id=f"select_role_{select_type}_{guild_id}", row=row)
            self.guild_id = guild_id
            self.select_type = select_type
            self.id_mapping = id_mapping 
            self.cog = cog # Stocker l'instance du cog

        async def callback(self, interaction: discord.Interaction):
            if not interaction.guild:
                await interaction.response.send_message("Erreur: Impossible de trouver le serveur courant pour cette action.", ephemeral=True)
                return

            if not self.values or self.values[0] in ["no_items", "error_guild"]:
                await interaction.response.send_message("Veuillez s√©lectionner un r√¥le valide.", ephemeral=True)
                return

            selected_short_id = self.values[0]
            selected_role_id = self.id_mapping.get(selected_short_id)

            if not selected_role_id:
                await interaction.response.send_message("Erreur: Impossible de r√©cup√©rer l'ID du r√¥le.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                if self.select_type == "admin_role":
                    state.admin_role_id = selected_role_id
                elif self.select_type == "notification_role":
                    state.notification_role_id = selected_role_id
                
                try:
                    db.commit()
                    db.refresh(state) 

                    # Rafra√Æchir la vue compl√®te pour refl√©ter le changement
                    await interaction.response.edit_message(
                        embed=self.cog.generate_role_and_channel_config_embed(state), # Utiliser self.cog
                        view=self.cog.generate_general_config_view(self.guild_id, interaction.guild) # Utiliser self.cog
                    )
                    await interaction.followup.send(f"R√¥le pour {'l\'administration' if self.select_type == 'admin_role' else 'les notifications'} mis √† jour.", ephemeral=True)
                except Exception as e:
                    db.rollback()
                    await interaction.response.send_message(f"Erreur lors de la sauvegarde : {e}", ephemeral=True)
            else:
                await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur pour sauvegarder la configuration.", ephemeral=True)
            
            db.close()

    # --- Classe pour la s√©lection des Salons avec Pagination ---
    class ChannelSelect(ui.Select):
        def __init__(self, guild_id: str, select_type: str, row: int, options: list[discord.SelectOption], id_mapping: dict, page: int = 0, cog: 'AdminCog'=None):
            self.guild_id = guild_id
            self.select_type = select_type
            self.id_mapping = id_mapping
            self.page = page
            self.cog = cog # Stocker l'instance du cog

            # Filtrer les options pour la page actuelle
            start_index = page * MAX_OPTIONS_PER_PAGE
            end_index = start_index + MAX_OPTIONS_PER_PAGE
            current_page_options = options[start_index:end_index]

            if not current_page_options:
                current_page_options.append(discord.SelectOption(label="Aucun salon sur cette page", value="no_channels", default=True))

            placeholder = f"S√©lectionnez le salon pour le jeu (Page {page + 1})..."
            placeholder = placeholder[:100]
            # Le custom_id doit inclure la page pour √™tre unique par page,
            # car chaque page aura son propre SelectMenu.
            super().__init__(placeholder=placeholder, options=current_page_options, custom_id=f"select_channel_{select_type}_{guild_id}_page{page}", row=row)

        async def callback(self, interaction: discord.Interaction):
            if not interaction.guild:
                await interaction.response.send_message("Erreur: Impossible de trouver le serveur courant pour cette action.", ephemeral=True)
                return

            if not self.values or self.values[0] in ["no_channels", "error_guild", "no_items"]:
                await interaction.response.send_message("Veuillez s√©lectionner un salon valide.", ephemeral=True)
                return

            selected_short_id = self.values[0]
            selected_channel_id = self.id_mapping.get(selected_short_id)

            if not selected_channel_id:
                await interaction.response.send_message("Erreur: Impossible de r√©cup√©rer l'ID du salon.", ephemeral=True)
                return

            db = SessionLocal()
            state = db.query(ServerState).filter_by(guild_id=self.guild_id).first()

            if state:
                if self.select_type == "game_channel":
                    state.game_channel_id = selected_channel_id
                
                try:
                    db.commit()
                    db.refresh(state)

                    # Rafra√Æchir la vue enti√®re pour que le changement de page soit bien g√©r√©
                    # dans le cas o√π l'utilisateur change de page et s√©lectionne un salon.
                    # On utilise le cog pour g√©n√©rer la vue compl√®te.
                    await interaction.response.edit_message(
                        embed=self.cog.generate_role_and_channel_config_embed(state), # Utiliser self.cog
                        view=self.cog.generate_general_config_view(self.guild_id, interaction.guild) # Utiliser self.cog
                    )
                    await interaction.followup.send(f"Salon de jeu mis √† jour.", ephemeral=True)
                except Exception as e:
                    db.rollback()
                    await interaction.response.send_message(f"Erreur lors de la sauvegarde : {e}", ephemeral=True)
            else:
                await interaction.response.send_message("Erreur: Impossible de trouver l'√©tat du serveur pour sauvegarder la configuration.", ephemeral=True)
            
            db.close()

    # --- Classe pour g√©rer la vue pagin√©e des salons ---
    class PaginatedViewManager(ui.View):
        def __init__(self, guild_id: str, all_options: list[discord.SelectOption], id_mapping: dict, select_type: str, initial_page: int = 0, cog: 'AdminCog'=None):
            super().__init__(timeout=180)
            self.guild_id = guild_id
            self.all_options = all_options
            self.id_mapping = id_mapping
            self.select_type = select_type
            self.current_page = initial_page
            self.cog = cog

            # Cr√©ation des composants avec des lignes initiales.
            if self.select_type in ('admin_role', 'notification_role'):
                self.selection_menu = AdminCog.RoleSelect(
                    guild_id=self.guild_id, select_type=self.select_type, row=0, 
                    options=self.all_options, id_mapping=self.id_mapping, cog=self.cog
                )
            elif self.select_type == 'channel':
                self.selection_menu = AdminCog.ChannelSelect(
                    guild_id=self.guild_id, select_type=self.select_type, row=0, 
                    options=self.all_options, id_mapping=self.id_mapping, 
                    page=self.current_page, cog=self.cog
                )
            else:
                raise ValueError(f"Unknown select_type: {self.select_type}")

            self.prev_button = ui.Button(
                label="‚¨Ö Pr√©c√©dent", style=discord.ButtonStyle.secondary,
                custom_id=f"pagination_{self.select_type}_prev_{self.guild_id}",
                disabled=self.current_page == 0, row=1 
            )
            self.next_button = ui.Button(
                label="Suivant ‚û°", style=discord.ButtonStyle.secondary,
                custom_id=f"pagination_{self.select_type}_next_{self.guild_id}",
                disabled=(self.current_page + 1) * MAX_OPTIONS_PER_PAGE >= len(self.all_options), row=1
            )
            
            self.prev_button.callback = self.handle_page_change
            self.next_button.callback = self.handle_page_change

            self.total_pages = math.ceil(len(self.all_options) / MAX_OPTIONS_PER_PAGE) if MAX_OPTIONS_PER_PAGE else 1
            if self.all_options and self.total_pages == 0:
                self.total_pages = 1
            
            self.prev_button.disabled = self.current_page == 0
            self.next_button.disabled = self.current_page >= self.total_pages - 1 if self.total_pages > 0 else True

        def update_components(self, interaction: discord.Interaction):
            self.remove_item(self.selection_menu)

            if self.select_type in ('admin_role', 'notification_role'):
                self.selection_menu = AdminCog.RoleSelect(
                    guild_id=self.guild_id, select_type=self.select_type, row=0, 
                    options=self.all_options, id_mapping=self.id_mapping, cog=self.cog
                )
            elif self.select_type == 'channel':
                self.selection_menu = AdminCog.ChannelSelect(
                    guild_id=self.guild_id, select_type=self.select_type, row=0, 
                    options=self.all_options, id_mapping=self.id_mapping, 
                    page=self.current_page, cog=self.cog
                )
            else:
                raise ValueError(f"Unknown select_type: {self.select_type}")
            self.add_item(self.selection_menu)

            self.prev_button.disabled = self.current_page == 0
            self.next_button.disabled = self.current_page >= self.total_pages - 1 if self.total_pages > 0 else True

        async def handle_page_change(self, interaction: discord.Interaction):
            if interaction.data['custom_id'].endswith('_prev'):
                if self.current_page > 0:
                    self.current_page -= 1
                    self.update_components(interaction)
                    await interaction.response.edit_message(view=self)
                else:
                    await interaction.response.send_message("C'est la premi√®re page.", ephemeral=True)
            else: # next
                if (self.current_page + 1) * MAX_OPTIONS_PER_PAGE < len(self.all_options):
                    self.current_page += 1
                    self.update_components(interaction)
                    await interaction.response.edit_message(view=self)
                else:
                    await interaction.response.send_message("C'est la derni√®re page.", ephemeral=True)

    # --- M√©thodes pour les autres configurations (Statistiques, Notifications, Avanc√©es) ---
    # ... (reste des m√©thodes : generate_stats_embed, generate_stats_view, etc.) ...
    def generate_stats_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üìä Statistiques du Serveur", description="Fonctionnalit√© en d√©veloppement.", color=discord.Color.purple())
        return embed
    
    def generate_stats_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3, cog=self)) # Passer self
        return view

    def generate_notifications_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üîî Param√®tres de Notifications", description="Configurez les r√¥les pour les notifications du jeu. (Fonctionnalit√© en d√©veloppement)", color=discord.Color.green())
        return embed
    
    def generate_notifications_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3, cog=self)) # Passer self
        return view

    def generate_advanced_options_embed(self, guild_id: str) -> discord.Embed:
        embed = discord.Embed(title="üõ†Ô∏è Options Avanc√©es", description="Fonctionnalit√© en d√©veloppement.", color=discord.Color.grey())
        return embed
    
    def generate_advanced_options_view(self, guild_id: str) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        view.add_item(self.BackButton("‚¨Ö Retour Param√®tres Jeu", guild_id, discord.ButtonStyle.secondary, row=3, cog=self)) # Passer self
        return view


    # M√©thode principale pour g√©n√©rer la vue du menu de configuration
    def generate_config_menu_view(self, guild_id: str, guild: discord.Guild) -> discord.ui.View:
        view = discord.ui.View(timeout=None)
        
        # Ligne 0 : Mode/Dur√©e, Lancer/R√©initialiser, Sauvegarder
        view.add_item(self.SetupGameModeButton("üïπÔ∏è Mode & Dur√©e", guild_id, discord.ButtonStyle.primary, row=0, cog=self)) 
        view.add_item(self.ConfigButton("üéÆ Lancer/Reinitialiser Partie", guild_id, discord.ButtonStyle.success, row=0, cog=self)) 
        view.add_item(self.ConfigButton("üíæ Sauvegarder l'√âtat", guild_id, discord.ButtonStyle.blurple, row=0, cog=self)) 
        
        # Ligne 1 : R√¥les & Salons, Statistiques
        view.add_item(self.GeneralConfigButton("‚öôÔ∏è R√¥les & Salons", guild_id, discord.ButtonStyle.grey, row=1, cog=self)) 
        view.add_item(self.ConfigButton("üìä Voir Statistiques", guild_id, discord.ButtonStyle.gray, row=1, cog=self)) 
        
        # Ligne 2 : Notifications, Options Avanc√©es
        view.add_item(self.ConfigButton("üîî Notifications", guild_id, discord.ButtonStyle.green, row=2, cog=self)) 
        view.add_item(self.ConfigButton("üõ† Options Avanc√©es", guild_id, discord.ButtonStyle.secondary, row=2, cog=self)) 
        
        # Ligne 3 : Bouton retour final
        view.add_item(self.BackButton("‚¨Ö Retour", guild_id, discord.ButtonStyle.red, row=3, cog=self)) 
        
        return view

async def setup(bot):
    await bot.add_cog(AdminCog(bot))